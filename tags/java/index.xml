<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on 仿生人会梦见电子羊吗？</title><link>https://cyber-blog.github.io/tags/java/</link><description>Recent content in Java on 仿生人会梦见电子羊吗？</description><generator>Hugo -- gohugo.io</generator><language>zh-ch</language><managingEditor>majiang213@foxmail.com (majiang)</managingEditor><webMaster>majiang213@foxmail.com (majiang)</webMaster><lastBuildDate>Fri, 19 Sep 2025 16:30:00 +0800</lastBuildDate><atom:link href="https://cyber-blog.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot应用假死现象：SLF4J日志框架冲突深度分析</title><link>https://cyber-blog.github.io/p/spring-boot/</link><pubDate>Fri, 19 Sep 2025 16:30:00 +0800</pubDate><author>majiang213@foxmail.com (majiang)</author><guid>https://cyber-blog.github.io/p/spring-boot/</guid><description>&lt;h2 id="引言">引言
&lt;/h2>&lt;h3 id="一个令人困惑的现象">一个令人困惑的现象
&lt;/h3>&lt;p>我最近遇到了一个奇怪的现象：在一个 Java Spring Boot 项目开发中，应用启动时显示了一些日志，然后就完全停止输出，程序看起来像是卡住了。控制台光标在闪烁，但是什么都不会发生。&lt;/p>
&lt;p>然而，通过排除一个jar包，程序就能正常启动。这让我非常困惑。 为什么排除一个日志相关的依赖就能解决问题？程序真的卡住了吗？&lt;/p>
&lt;p>我将分析我最近遇到的一个真实案例。&lt;/p>
&lt;h2 id="一当程序卡住的那一刻">一、当程序&amp;quot;卡住&amp;quot;的那一刻
&lt;/h2>&lt;h3 id="初步现象程序似乎停止了">初步现象：程序似乎停止了
&lt;/h3>&lt;p>我执行通过IDEA执行&lt;code>mvn spring-boot:run&lt;/code> 启动应用时，控制台显示了这些信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">SLF4J&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">W&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="n">contains&lt;/span> &lt;span class="n">multiple&lt;/span> &lt;span class="n">SLF4J&lt;/span> &lt;span class="n">providers&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SLF4J&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">W&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Found&lt;/span> &lt;span class="n">provider&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">slf4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reload4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Reload4jServiceProvider&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="n">cd705f&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SLF4J&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">W&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Found&lt;/span> &lt;span class="n">provider&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">slf4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SLF4JServiceProvider&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="mi">9225652&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SLF4J&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Actual&lt;/span> &lt;span class="n">provider&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">slf4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reload4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Reload4jServiceProvider&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="n">cd705f&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log4j&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">WARN&lt;/span> &lt;span class="n">No&lt;/span> &lt;span class="n">appenders&lt;/span> &lt;span class="n">could&lt;/span> &lt;span class="n">be&lt;/span> &lt;span class="n">found&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sankuai&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">octo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mns&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ProcessInfoUtil&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log4j&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">WARN&lt;/span> &lt;span class="n">Please&lt;/span> &lt;span class="n">initialize&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">log4j&lt;/span> &lt;span class="n">system&lt;/span> &lt;span class="n">properly&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">09&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">19&lt;/span>&lt;span class="n">T02&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">23.178052&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="n">create&lt;/span> &lt;span class="n">XMDFileAppender&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">xmdCraneAppender&lt;/span> &lt;span class="n">fullFileName&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">applogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">crane&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span> &lt;span class="n">appkey&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span> &lt;span class="n">fullFilePattern&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">applogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">crane&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">-%&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">yyyy&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">MM&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dd&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">-%&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">09&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">19&lt;/span>&lt;span class="n">T02&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">23.178277&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="n">create&lt;/span> &lt;span class="n">XMDFileAppender&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">xmdMafkaAppender&lt;/span> &lt;span class="n">fullFileName&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">applogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mafka&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span> &lt;span class="n">appkey&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span> &lt;span class="n">fullFilePattern&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">applogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mafka&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">-%&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">yyyy&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">MM&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dd&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">-%&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">09&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">19&lt;/span>&lt;span class="n">T02&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">23.178424&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="n">create&lt;/span> &lt;span class="n">XMDFileAppender&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">xmdRhinoAppender&lt;/span> &lt;span class="n">fullFileName&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">applogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">rhino&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span> &lt;span class="n">appkey&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span> &lt;span class="n">fullFilePattern&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">applogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">rhino&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">-%&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">yyyy&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">MM&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dd&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">-%&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">09&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">19&lt;/span>&lt;span class="n">T02&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">23.178563&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="n">create&lt;/span> &lt;span class="n">XMDFileAppender&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">xmdKmsAppender&lt;/span> &lt;span class="n">fullFileName&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">applogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">kms&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span> &lt;span class="n">appkey&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span> &lt;span class="n">fullFilePattern&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">applogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">kms&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">-%&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">yyyy&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">MM&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dd&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">-%&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">09&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">19&lt;/span>&lt;span class="n">T02&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">23.183208&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="n">Begin&lt;/span> &lt;span class="n">Stop&lt;/span> &lt;span class="n">AsyncScibeAppender&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ScribeAsyncAppender&lt;/span> &lt;span class="n">Queue&lt;/span> &lt;span class="n">still&lt;/span> &lt;span class="n">has&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">events&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">09&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">19&lt;/span>&lt;span class="n">T02&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">23.183676&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="n">End&lt;/span> &lt;span class="n">Stop&lt;/span> &lt;span class="n">AsyncScibeAppender&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ScribeAsyncAppender&lt;/span> &lt;span class="n">Queue&lt;/span> &lt;span class="n">still&lt;/span> &lt;span class="n">has&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">events&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">////////////////////////////////////////////////////////////////////&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">_ooOoo_&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">o8888888o&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="mi">88&lt;/span>&lt;span class="s2">&amp;#34; . &amp;#34;&lt;/span>&lt;span class="mi">88&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="o">^&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">O&lt;/span>\ &lt;span class="o">=&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">O&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">____&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="o">---&lt;/span>&lt;span class="s1">&amp;#39;\____ //&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="s1">&amp;#39; &lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">| |// `. //&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">/&lt;/span> \\&lt;span class="o">|||&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="o">|||//&lt;/span> \ &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="o">|||||&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span> &lt;span class="o">|||||-&lt;/span> \ &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> \\\ &lt;span class="o">-&lt;/span> &lt;span class="o">///&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">|&lt;/span> \&lt;span class="n">_&lt;/span>&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>\&lt;span class="o">---/&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> \ &lt;span class="o">.-&lt;/span>\&lt;span class="n">__&lt;/span> &lt;span class="err">`&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="err">`&lt;/span> &lt;span class="n">___&lt;/span>&lt;span class="o">/-.&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">___&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="s1">&amp;#39; /--.--\ `. . ___ //&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt; `.___\_&amp;lt;|&amp;gt;_/___.&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="s1">&amp;#39;&amp;#34;&amp;#34;. //&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="err">`&lt;/span>&lt;span class="o">-&lt;/span> \&lt;span class="err">`&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">`&lt;/span>\ &lt;span class="n">_&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="err">`&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> \ \ &lt;span class="err">`&lt;/span>&lt;span class="o">-.&lt;/span> \&lt;span class="n">_&lt;/span> &lt;span class="n">__&lt;/span>\ &lt;span class="o">/&lt;/span>&lt;span class="n">__&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="o">.-&lt;/span>&lt;span class="err">`&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">========&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="o">-.&lt;/span>&lt;span class="n">____&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="o">-.&lt;/span>&lt;span class="n">___&lt;/span>\&lt;span class="n">_____&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">___&lt;/span>&lt;span class="o">.-&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="n">____&lt;/span>&lt;span class="o">.-&lt;/span>&lt;span class="s1">&amp;#39;======== //&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="err">`&lt;/span>&lt;span class="o">=---=&lt;/span>&lt;span class="s1">&amp;#39; //&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="o">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="err">佛祖保佑&lt;/span> &lt;span class="err">永不宕机&lt;/span> &lt;span class="err">永无&lt;/span>&lt;span class="n">BUG&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">Thanks&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">Buddha&lt;/span>&lt;span class="s1">&amp;#39;s blessing, may our system //&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">remain&lt;/span> &lt;span class="n">stable&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">bug&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">free&lt;/span> &lt;span class="n">forever&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="o">//&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">////////////////////////////////////////////////////////////////////&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">9&lt;/span>&lt;span class="err">月&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2025&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">26&lt;/span> &lt;span class="err">上午&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bouncycastle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jsse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PropertyUtils&lt;/span> &lt;span class="n">getStringSecurityProperty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">信息&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Found&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">security&lt;/span> &lt;span class="n">property&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">jdk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tls&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">disabledAlgorithms&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">SSLv3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TLSv1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TLSv1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RC4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DES&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MD5withRSA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DH&lt;/span> &lt;span class="n">keySize&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">EC&lt;/span> &lt;span class="n">keySize&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">224&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="n">DES_EDE_CBC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">anon&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">9&lt;/span>&lt;span class="err">月&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2025&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">26&lt;/span> &lt;span class="err">上午&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bouncycastle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jsse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PropertyUtils&lt;/span> &lt;span class="n">getStringSecurityProperty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">信息&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Found&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">security&lt;/span> &lt;span class="n">property&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">jdk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">certpath&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">disabledAlgorithms&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">MD2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MD5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SHA1&lt;/span> &lt;span class="n">jdkCA&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">usage&lt;/span> &lt;span class="n">TLSServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RSA&lt;/span> &lt;span class="n">keySize&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DSA&lt;/span> &lt;span class="n">keySize&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">EC&lt;/span> &lt;span class="n">keySize&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">224&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SHA1&lt;/span> &lt;span class="n">usage&lt;/span> &lt;span class="n">SignedJAR&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">denyAfter&lt;/span> &lt;span class="mi">2019&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">01&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">01&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">9&lt;/span>&lt;span class="err">月&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2025&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">26&lt;/span> &lt;span class="err">上午&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bouncycastle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jsse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DisabledAlgorithmConstraints&lt;/span> &lt;span class="n">create&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">警告&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Ignoring&lt;/span> &lt;span class="n">unsupported&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="s1">&amp;#39;jdk.certpath.disabledAlgorithms&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SHA1&lt;/span> &lt;span class="n">jdkCA&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">usage&lt;/span> &lt;span class="n">TLSServer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">9&lt;/span>&lt;span class="err">月&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2025&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">26&lt;/span> &lt;span class="err">上午&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bouncycastle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jsse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">provider&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DisabledAlgorithmConstraints&lt;/span> &lt;span class="n">create&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">警告&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Ignoring&lt;/span> &lt;span class="n">unsupported&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="s1">&amp;#39;jdk.certpath.disabledAlgorithms&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SHA1&lt;/span> &lt;span class="n">usage&lt;/span> &lt;span class="n">SignedJAR&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">denyAfter&lt;/span> &lt;span class="mi">2019&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">01&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">01&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">09&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">19&lt;/span>&lt;span class="n">T02&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">26.632017&lt;/span>&lt;span class="n">Z&lt;/span> &lt;span class="n">xmdlog&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">registry&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">service&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="n">Registry&lt;/span> &lt;span class="n">LogManager&lt;/span> &lt;span class="n">register&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="bp">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sankuai&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">api&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">register&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="n">appkey&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ip&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">172.18&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mf">151.200&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">12315&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">TEST&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">2.2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Local&lt;/span> &lt;span class="n">Appenv&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">deployenv&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">qa&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">env&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AppEnv&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">deployenv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;qa&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">swimlane&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;tmp-test&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;null&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">grouptags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;null&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Fri&lt;/span> &lt;span class="n">Sep&lt;/span> &lt;span class="mi">19&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">48&lt;/span> &lt;span class="n">CST&lt;/span> &lt;span class="mi">2025&lt;/span> &lt;span class="n">WARN&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Establishing&lt;/span> &lt;span class="n">SSL&lt;/span> &lt;span class="n">connection&lt;/span> &lt;span class="n">without&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="s1">&amp;#39;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&amp;#39;&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">For&lt;/span> &lt;span class="n">compliance&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">existing&lt;/span> &lt;span class="n">applications&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">using&lt;/span> &lt;span class="n">SSL&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">verifyServerCertificate&lt;/span> &lt;span class="n">property&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">set&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="s1">&amp;#39;false&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">You&lt;/span> &lt;span class="n">need&lt;/span> &lt;span class="n">either&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">explicitly&lt;/span> &lt;span class="n">disable&lt;/span> &lt;span class="n">SSL&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">setting&lt;/span> &lt;span class="n">useSSL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">set&lt;/span> &lt;span class="n">useSSL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">true&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">provide&lt;/span> &lt;span class="n">truststore&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="n">certificate&lt;/span> &lt;span class="n">verification&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在显示了一些组件初始化信息和ASCII图案后，程序就完全停止输出了。控制台光标在闪烁，但是什么都不会发生。&lt;/p>
&lt;h2 id="二真相往往出人意料">二、真相往往出人意料
&lt;/h2>&lt;h3 id="数字不会说谎567的cpu使用率">数字不会说谎：56.7%的CPU使用率
&lt;/h3>&lt;p>首先使用 &lt;code>ps&lt;/code> 命令查看进程信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ps aux &lt;span class="p">|&lt;/span> grep ApplicationLoader
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">majiang &lt;span class="m">97897&lt;/span> 56.7 2.5 &lt;span class="m">443940128&lt;/span> &lt;span class="m">633216&lt;/span> ?? R 11:34AM 1:19.25
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个结果让我震惊：&lt;/p>
&lt;ul>
&lt;li>进程状态: R (Running) — 程序在运行，不是阻塞状态&lt;/li>
&lt;li>CPU使用率: 56.7% — 程序在积极工作&lt;/li>
&lt;li>运行时间: 1小时19分钟 — 程序一直在持续运行&lt;/li>
&lt;/ul>
&lt;p>我原本以为程序卡住了，如果真是这样，CPU使用率应该接近0%。但现在56.7%的CPU使用率说明程序在正常运行！&lt;/p>
&lt;h3 id="深入检查使用各种分析工具">深入检查：使用各种分析工具
&lt;/h3>&lt;p>为了彻底搞清楚程序在做什么，我使用了多种分析手段：&lt;/p>
&lt;p>线程状态分析: 使用&lt;code>jstack&lt;/code>反复检查，没有发现死锁或异常阻塞&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Profiler火焰图: 通过JProfiler查看方法调用，程序执行正常&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程时间线: 观察线程的时间分布，各个线程都在正常工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程快照: 多次获取线程快照对比，线程状态正常工作&lt;/p>
&lt;p>所有这些工具都指向同一个结论：程序运行完全正常，没有任何阻塞或性能问题。&lt;/p>
&lt;p>进一步分析线程堆栈，我发现了关键信息：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl"> $ jstack &lt;span class="m">97897&lt;/span> &lt;span class="p">|&lt;/span> grep -E &lt;span class="s2">&amp;#34;main.*tid&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 没有找到main线程！&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ jstack &lt;span class="m">97897&lt;/span> &lt;span class="p">|&lt;/span> head -20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;qtp1366921090-106&amp;#34;&lt;/span> &lt;span class="c1">#106 prio=5 ... waiting on condition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;qtp1366921090-107&amp;#34;&lt;/span> &lt;span class="c1">#107 prio=5 ... runnable &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;RhinoHttpSeverBossGroup-2-1&amp;#34;&lt;/span> &lt;span class="c1">#128 prio=5 ... runnable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;MtthriftServerBossGroup-8-1&amp;#34;&lt;/span> &lt;span class="c1">#346 prio=5 ... runnable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;DestroyJavaVM&amp;#34;&lt;/span> &lt;span class="c1">#377 prio=5 ... waiting on condition&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些发现彻底改变了我的认知：&lt;/p>
&lt;ul>
&lt;li>✅ Main线程已经正常执行完毕并退出&lt;/li>
&lt;li>✅ Spring Boot应用完全启动成功&lt;/li>
&lt;li>✅ HTTP服务器线程池（qtp开头的线程）在正常运行&lt;/li>
&lt;li>✅ 各种服务组件的工作线程都在运行&lt;/li>
&lt;/ul>
&lt;p>程序根本没有&amp;quot;卡住&amp;quot;！&lt;/p>
&lt;p>真正发生的是：应用在后台正常运行，但是没有任何日志输出。这给我造成了程序停止响应的错觉。&lt;/p>
&lt;p>问题的本质从&amp;quot;程序阻塞&amp;quot;变成了&amp;quot;日志系统失效&amp;quot;。&lt;/p>
&lt;h2 id="三静默杀手的真面目">三、静默杀手的真面目
&lt;/h2>&lt;h3 id="slf4j的选择困难症">SLF4J的选择困难症
&lt;/h3>&lt;p>既然程序正常运行但没有日志输出，问题就出在日志系统上。回看最初的警告信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SLF4J&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">W&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="n">contains&lt;/span> &lt;span class="n">multiple&lt;/span> &lt;span class="n">SLF4J&lt;/span> &lt;span class="n">providers&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SLF4J&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">W&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Found&lt;/span> &lt;span class="n">provider&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">slf4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reload4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Reload4jServiceProvider&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="n">cd705f&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SLF4J&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">W&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Found&lt;/span> &lt;span class="n">provider&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">slf4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SLF4JServiceProvider&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="mi">9225652&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SLF4J&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Actual&lt;/span> &lt;span class="n">provider&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">slf4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reload4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Reload4jServiceProvider&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="n">cd705f&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里揭示了关键问题：&lt;strong>SLF4J在两个日志实现之间选择了错误的那个&lt;/strong>。&lt;/p>
&lt;p>&lt;code>SLF4J&lt;/code>是一个日志门面，它在运行时从classpath中选择一个具体的日志实现。选择策略很简单：使用第一个发现的提供者。&lt;/p>
&lt;p>&lt;strong>两个冲突的提供者&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>org.slf4j.reload4j.Reload4jServiceProvider&lt;/code> — 来自&lt;code>slf4j-reload4j&lt;/code>包，兼容Log4j 1.x&lt;/li>
&lt;li>&lt;code>org.apache.logging.slf4j.SLF4JServiceProvider&lt;/code> — 来自&lt;code>log4j-slf4j2-impl&lt;/code>包，支持Log4j 2.x&lt;/li>
&lt;/ul>
&lt;p>SLF4J选择了reload4j提供者，但我的项目配置的是Log4j 2.x格式。&lt;/p>
&lt;h3 id="被吞噬的日志去了哪里">被吞噬的日志去了哪里
&lt;/h3>&lt;p>我的项目使用的是标准的Log4j 2.x配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;configuration&lt;/span> &lt;span class="na">status=&lt;/span>&lt;span class="s">&amp;#34;info&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;appenders&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;Console&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;Console&amp;#34;&lt;/span> &lt;span class="na">target=&lt;/span>&lt;span class="s">&amp;#34;SYSTEM_OUT&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;PatternLayout&lt;/span> &lt;span class="na">pattern=&lt;/span>&lt;span class="s">&amp;#34;${sys:CONSOLE_LOG_PATTERN}&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/Console&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;XMDFile&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;infoAppender&amp;#34;&lt;/span> &lt;span class="na">fileName=&lt;/span>&lt;span class="s">&amp;#34;info.log&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!-- Log4j 2.x特有的appender --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/XMDFile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/appenders&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;loggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;root&lt;/span> &lt;span class="na">level=&lt;/span>&lt;span class="s">&amp;#34;info&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;appender-ref&lt;/span> &lt;span class="na">ref=&lt;/span>&lt;span class="s">&amp;#34;Console&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/root&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/loggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>问题在于：reload4j只能理解Log4j 1.x的配置格式，无法解析Log4j 2.x的高级语法。&lt;/p>
&lt;p>失败链路：&lt;/p>
&lt;ol>
&lt;li>reload4j尝试解析log4j2.xml&lt;/li>
&lt;li>遇到不认识的&lt;code>&amp;lt;XMDFile&amp;gt;&lt;/code>等Log4j 2.x元素&lt;/li>
&lt;li>配置解析失败，没有创建任何appender&lt;/li>
&lt;li>所有日志调用都被静默丢弃&lt;/li>
&lt;/ol>
&lt;p>这就是为什么会出现这个警告：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">log4j:WARN No appenders could be found for logger (com.sankuai.inf.octo.mns.util.ProcessInfoUtil).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">log4j:WARN Please initialize the log4j system properly.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完整的&amp;quot;吞噬&amp;quot;过程：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> 第1步: 业务代码调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> logger.info&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;Spring Boot application started&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 第2步: SLF4J门面接收调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> org.slf4j.Logger.info&lt;span class="o">(&lt;/span>String msg&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 第3步: SLF4J路由到选中的提供者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SLF4J → org.slf4j.reload4j.Reload4jLoggerAdapter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 第4步: reload4j适配器委托给Log4j 1.x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Reload4jLoggerAdapter → org.apache.log4j.Logger &lt;span class="o">(&lt;/span>reload4j实现&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 第5步: Log4j检查可用的appender
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> logger.getAllAppenders&lt;span class="o">()&lt;/span> → 返回空集合 &lt;span class="o">(&lt;/span>因为配置解析失败&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 第6步: 没有appender可用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Log4j判断：既然没有appender，就直接丢弃这条消息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 第7步: 静默返回
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 方法正常返回，不抛异常，业务代码继续执行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 结果: 用户完全看不到任何日志输出
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Log4j采用&amp;quot;静默失败&amp;quot;策略：当没有可用的appender时，所有日志调用正常执行但输出被完全丢弃，不会抛出异常影响业务逻辑。&lt;/p>
&lt;p>这就是为什么排除slf4j-reload4j能解决问题：去掉错误的提供者后，SLF4J会选择正确的Log4j 2.x实现，日志系统恢复正常。&lt;/p>
&lt;h2 id="四破解之道">四、破解之道
&lt;/h2>&lt;h3 id="斩断混乱的依赖链">斩断混乱的依赖链
&lt;/h3>&lt;p>理解了问题本质后，解决方案就很清楚了：&lt;strong>消除SLF4J提供者冲突&lt;/strong>。&lt;/p>
&lt;p>通过Maven依赖排除，将错误的提供者从classpath中移除：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.sankuai.com&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>example-sdk&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>slf4j-reload4j&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.slf4j&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修复后的效果：&lt;/p>
&lt;ol>
&lt;li>Classpath中只剩下log4j-slf4j2-impl提供者&lt;/li>
&lt;li>SLF4J自动选择Log4j 2.x实现&lt;/li>
&lt;li>Log4j 2.x正确解析log4j2.xml配置文件&lt;/li>
&lt;li>Console和File appender正常创建&lt;/li>
&lt;li>日志输出恢复正常，应用&amp;quot;复活&amp;quot;&lt;/li>
&lt;/ol>
&lt;p>验证修复结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">2025-09-19 10:37:00.840 INFO 62045 --- [ main] c.s.h.g.g.ApplicationLoader : Starting ApplicationLoader using Java 17.0.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2025-09-19 10:37:00.840 INFO 62045 --- [ main] c.s.h.g.g.ApplicationLoader : The following 1 profile is active: &amp;#34;test&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2025-09-19 10:37:15.234 INFO 62045 --- [ main] c.s.h.g.g.ApplicationLoader : Started ApplicationLoader in 14.628 seconds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>没有了SLF4J警告信息，没有了log4j的错误提示，一切都恢复正常。&lt;/p>
&lt;h3 id="为什么会一直使用reald4j">为什么会一直使用reald4j?
&lt;/h3>&lt;p>通过查看项目的pom.xml文件，我发现&lt;code>photo-thrift-client&lt;/code>依赖的位置确实影响了SLF4J提供者的选择。&lt;/p>
&lt;p>在&lt;code>hrmdm-globaldata-gateway-infrastructure/pom.xml&lt;/code>中，&lt;code>photo-thrift-client&lt;/code>依赖位于：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.sankuai.com&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>example-sdk&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>slf4j-reload4j&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.slf4j&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个依赖在文件中的位置相对较前，而且它直接引入了slf4j-reload4j作为传递依赖。由于Maven构建classpath时按照依赖在文件中的声明顺序，slf4j-reload4j的ServiceProvider文件被先加载到ServiceLoader中。&lt;/p>
&lt;p>具体的加载顺序：&lt;/p>
&lt;ol>
&lt;li>Maven解析依赖树，photo-thrift-client较早被处理&lt;/li>
&lt;li>photo-thrift-client → slf4j-reload4j 被添加到classpath靠前位置&lt;/li>
&lt;li>ServiceLoader扫描时，先发现slf4j-reload4j的ServiceProvider&lt;/li>
&lt;li>SLF4J选择第一个发现的提供者：reload4j&lt;/li>
&lt;/ol>
&lt;p>这就是为什么slf4j-reload4j被优先选择的根本原因。不同的项目中，如果依赖声明顺序不同，可能就会选择log4j-slf4j2-impl作为提供者。&lt;/p>
&lt;p>验证方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mvn dependency:build-classpath
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以查看实际构建的classpath顺序，确认slf4j-reload4j确实在前面。&lt;/p>
&lt;h2 id="尾声技术世界的启示">尾声：技术世界的启示
&lt;/h2>&lt;p>这个案例揭示了现代Java应用生态的复杂性。一个看似无害的传递依赖，通过微妙的类加载顺序和配置不匹配，导致了整个日志系统的静默失效。&lt;/p>
&lt;p>&lt;strong>表象具有欺骗性&lt;/strong>。当我最初看到程序&amp;quot;卡住&amp;quot;时，直觉告诉我这是一个阻塞或死锁问题。但深入分析后发现，程序运行完全正常，问题出在一个完全不同的地方。&lt;/p>
&lt;p>&lt;strong>工具是解决问题的关键&lt;/strong>。通过系统命令（ps、jstack）和分析工具，我能够透过现象看到本质，发现程序实际在正常运行。&lt;/p>
&lt;p>&lt;strong>依赖管理的重要性&lt;/strong>。在现代Java项目中，传递依赖可能带来意想不到的问题。一个小小的jar包冲突，就能让整个应用的行为变得诡异。&lt;/p>
&lt;p>&lt;strong>静默失败的双刃剑&lt;/strong>。Log4j的静默失败设计保护了业务逻辑，但也让问题变得更难发现。有时候，适当的&amp;quot;噪音&amp;quot;比安静的错误更有价值。&lt;/p>
&lt;p>最重要的是：&lt;strong>不要被第一印象误导&lt;/strong>。技术问题往往比表面现象更复杂，也更有趣。当遇到无法理解的现象时，保持好奇心，深入挖掘，往往会发现令人惊喜的真相。&lt;/p>
&lt;p>在复杂的技术世界里，最神秘的故障背后，可能隐藏着最简单的原理。&lt;/p></description></item><item><title>JMM</title><link>https://cyber-blog.github.io/p/jmm/</link><pubDate>Sat, 12 Jul 2025 00:00:00 +0000</pubDate><author>majiang213@foxmail.com (majiang)</author><guid>https://cyber-blog.github.io/p/jmm/</guid><description>&lt;h1 id="深入理解-java-内存模型jmm与锁机制">深入理解 Java 内存模型（JMM）与锁机制
&lt;/h1>&lt;h2 id="一java-内存模型jmm">一、Java 内存模型（JMM）
&lt;/h2>&lt;p>​ Java 内存模型的设计目的是解决多线程下共享内存的一致性问题。不同于强一致性硬件模型，现代 CPU 和编译器会对内存操作进行各种优化和重排序 。在没有规范约束时，不同处理器的缓存和乱序执行会导致线程间看到的共享变量值不一致，严重影响并发正确性 。Java 提供了跨平台的内存模型（JMM）来定义一套规则，使得 volatile、synchronized 等同步原语能在任何硬件架构上实现一致语义，保障“Write Once, Run Anywhere”原则 。&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jmm/jmm.png"
width="869"
height="714"
srcset="https://cyber-blog.github.io/p/jmm/jmm_hu3393634758812708448.png 480w, https://cyber-blog.github.io/p/jmm/jmm_hu842773841910910357.png 1024w"
loading="lazy"
alt="image-20250712103720924"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/p>
&lt;p>​ Java 内存模型示意：每个线程都有自己的工作内存（Local Memory），通过主内存（Main Memory）进行交互 。线程 A 要把修改写入共享变量，必须先把工作内存中的更新&lt;strong>刷新&lt;/strong>到主内存；线程 B 要读取，则必须从主内存将值&lt;strong>读取&lt;/strong>到其工作内存后才使用。JMM 通过控制这个读-写流程，为 Java 程序提供了内存可见性的保证 。下面示例说明了没有同步时指令重排序可能带来的问题：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">ReorderExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 线程 A 执行&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">writer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 线程 B 执行&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">reader&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>若线程 B 在 reader() 中首先读到 y == 2，按程序原序理应读到 x == 1；但由于编译器/CPU 可重排序写操作，上述代码可能实际执行为 y=2 后才 x=1，导致 B 看到 a==2 而 b==0 。JMM 引入 happens-before 规则来避免这类问题。&lt;/p>
&lt;p>&lt;strong>Happens-before 原则：&lt;/strong> 在 JMM 中，若操作 A happens-before 操作 B，则操作 A 的结果对操作 B 可见，并且执行 A 的语义在语句顺序上排在 B 之前 。常见的具体规则包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>程序顺序规则（Program Order）：&lt;/strong> 同一线程内，按代码顺序的每个操作 happens-before 于该线程中任意后续操作 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>监视器锁规则（Monitor Lock）：&lt;/strong> 对一个锁的 &lt;em>释放&lt;/em>（unlock）操作 happens-before 于随后对同一锁的 &lt;em>获取&lt;/em>（lock）操作 。这保证了进入同步块后可见之前在该锁保护下的修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>volatile 变量规则：&lt;/strong> 对一个 volatile 域的写操作 happens-before 于任意后续对同一 volatile 域的读操作 。这意味着写入 volatile 的值对后续读取立即可见，同时禁止了该写操作与读操作间的重排序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程启动规则：&lt;/strong> 如果线程 A 调用了 Thread.start() 启动线程 B，则线程 A 在 start() 之后的操作 happens-before 线程 B 中的任何操作 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程终结规则：&lt;/strong> 如果线程 A 调用了 Thread.join() 等待线程 B 完成，则线程 B 中的任意操作 happens-before 线程 A 从 join() 返回之后的操作 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>传递性：&lt;/strong> 如果 A happens-before B 且 B happens-before C，则 A happens-before C 。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>以上规则保证了关键同步操作之间的先后关系。例如，释放锁的写操作通过内存屏障将缓存数据刷新到主内存，随后的获取锁操作则从主内存重新读取，从而保证了锁保护块内存可见性；对 volatile 字段的写也会立刻被刷新，而读操作则从主内存读取最新值 。&lt;/p>
&lt;h3 id="可见性有序性原子性问题">&lt;strong>可见性、有序性、原子性问题&lt;/strong>
&lt;/h3>&lt;p>JMM 主要解决可见性和有序性问题。&lt;em>可见性&lt;/em> 指一个线程对共享变量的修改是否能及时被其他线程看到；_有序性_指在多线程环境下保证特定操作的执行顺序。通过 happens-before 规则，JMM 能保证关键操作的顺序性和可见性。&lt;strong>原子性&lt;/strong>问题方面，JMM 保证对基本类型的单次读/写（除 long/double 在旧版本中）的操作具有原子性，但复合操作（如 i++）并非原子。若需保证原子性，就必须使用同步手段或原子类。Java 提供了 java.util.concurrent.atomic 包中的原子类（如 AtomicInteger），它们使用 CAS + volatile 来实现线程安全的原子更新 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 示例：使用 volatile 保证可见性&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">VolatileExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 普通变量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">volatile&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">writer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">reader&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 如果读到 flag=1，则能保证看到 a=10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上例中，flag 是 volatile 字段，写线程先写 a=10 再写 flag=1，读线程读取到 flag==1 时，通过 happens-before 规则可见先前写的 a 值 。若去掉 volatile，这种可见性就不能被保障，可能读到过时的 a 值。&lt;/p>
&lt;h2 id="二hotspot-jvm-的锁升级机制">&lt;strong>二、HotSpot JVM 的锁升级机制&lt;/strong>
&lt;/h2>&lt;p>Java 的 synchronized 锁在 HotSpot JVM 中有多种状态优化，以减少无竞争情况下的加锁开销 。JDK6 之后，锁主要有四种状态：&lt;strong>无锁&lt;/strong>、&lt;strong>偏向锁&lt;/strong>、&lt;strong>轻量级锁&lt;/strong>、&lt;strong>重量级锁&lt;/strong> 。对象头（Object Header）中的 Mark Word 用于标记当前锁状态和相关指针（如线程 ID、锁记录指针等） 。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>无锁状态：&lt;/strong> 对象未被任何线程锁定。Mark Word 保存的是对象哈希码和年龄等信息 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>偏向锁：&lt;/strong> 适用于对象只被一个线程反复访问的场景。第一次加锁时，JVM 会将该线程的 ID 写入对象头，之后该线程可无竞争地多次进入同步块而无需 CAS 自旋 。如果其他线程竞争此锁（或出现必须撤销偏向的情况），JVM 会撤销偏向锁并升级为轻量级锁 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>轻量级锁（自旋锁）：&lt;/strong> 当偏向锁被撤销后，或并发程度较低时使用。线程获取锁时通过 CAS 将对象头指向自己栈帧中的 &lt;em>Lock Record&lt;/em>（锁记录），若失败则在用户态进行自旋重试 。轻量级锁可以在短期竞争中避免进入内核阻塞，提升性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重量级锁（监视器锁）：&lt;/strong> 当自旋仍无法获得锁（如自旋次数超过阈值或阻塞时间过长）时，JVM 会将锁升级为重量级锁。此时线程挂起，转入内核态由操作系统调度 。重量级锁的获取成本较高，但适用于高度竞争场景。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下面的示意图展示了典型的锁状态转换流程：&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jmm/image-20250712104201616.png"
width="748"
height="381"
srcset="https://cyber-blog.github.io/p/jmm/image-20250712104201616_hu17833523859756692957.png 480w, https://cyber-blog.github.io/p/jmm/image-20250712104201616_hu15817651795721076305.png 1024w"
loading="lazy"
alt="image-20250712104201616"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>对象锁状态转换图：HotSpot JVM 中对象锁的状态升级通常按无锁→偏向锁→轻量级锁→重量级锁的顺序进行 。例如，新对象创建后处于无锁；第一次线程访问若开启偏向锁，则进入偏向锁状态；当另一线程竞争时，偏向锁被撤销并升级为轻量级锁；若自旋多次仍未获取锁，则进一步膨胀为重量级锁 。&lt;/p>
&lt;h3 id="对象头与-mark-word">&lt;strong>对象头与 Mark Word&lt;/strong>
&lt;/h3>&lt;p>每个对象头（Object Header）包含 Mark Word 和类型指针（klass pointer）等元数据。Mark Word 存储对象运行时数据：平时包含对象的哈希码、GC 年龄等 ；加锁时则被修改为锁标记和相关指针 。下表示意了 Mark Word 的不同锁态编码：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>锁状态&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Mark Word 内容&lt;/strong>&lt;/th>
&lt;th>&lt;strong>低位标志位&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>无锁&lt;/td>
&lt;td>23bit 保存哈希码等，age，最低2位为 01&lt;/td>
&lt;td>01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>偏向锁&lt;/td>
&lt;td>线程ID、Epoch、age，高位标志位为 1，最低2位 01&lt;/td>
&lt;td>01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>轻量级锁&lt;/td>
&lt;td>指向栈上 Lock Record 的指针，最低2位 00&lt;/td>
&lt;td>00&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>重量级锁&lt;/td>
&lt;td>指向 Monitor 对象的指针，最低2位 10&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>&lt;em>（上述表格源自 HotSpot 对象头结构，简化说明）&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="锁升级触发条件与过程">&lt;strong>锁升级触发条件与过程&lt;/strong>
&lt;/h3>&lt;p>锁的升级（膨胀）通常由以下条件触发：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>无锁→偏向锁：&lt;/strong> 在对象首次被线程访问时，若启用偏向锁，JVM 会将线程 ID 写入对象头标记为偏向 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>偏向锁→轻量级锁：&lt;/strong> 若在偏向锁状态下有第二线程尝试获取该锁，则检测到竞争，偏向锁被撤销并升级为轻量级锁 。撤销时需要安全点（safepoint），此过程将对象头转为指向申请锁的线程的 Lock Record，实现 CAS 自旋锁 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>轻量级锁→重量级锁：&lt;/strong> 如果在轻量级锁状态下竞争仍然激烈（例如自旋等待超过一定次数或线程挂起等待），JVM 会膨胀为重量级锁 。一般来说，超过处理器核心数的一半或固定自旋阈值时，就会升级为重量级锁 。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下面是锁升级过程的简单 Java 示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">synchronized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">syncIncrement&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上例中，syncIncrement 初次被线程调用时可能处于无锁或偏向锁（只记录线程ID），当另一个线程并发调用时，偏向锁将撤销并切换到轻量级锁；若后续竞争继续，可能升级为重量级锁。读者可以使用 -XX:+PrintSafepointStatistics 等 JVM 参数或 Profiling 工具观察实际执行过程。&lt;/p>
&lt;h3 id="偏向锁的撤销与回退">&lt;strong>偏向锁的撤销与回退&lt;/strong>
&lt;/h3>&lt;p>偏向锁撤销过程复杂：当检测到竞争需要撤销时，JVM 必须在所有线程停止（safepoint）时完成撤销操作 。撤销时一般会将对象头恢复为无锁状态或直接升级为轻量级锁状态 。常见触发情形包括：当前线程调用 Object.hashCode()、执行 wait/notify/monitorexit、JNI 的 MonitorEnter/MonitorExit、Unsafe.monitorEnter 等，都可能强制撤销偏向锁并转为重量级锁 。例如，在撤销偏向锁后，如果发现原偏向线程还在同步块中，则转换为轻量级锁；若偏向线程已经退出同步块，则可将其恢复为无锁或轻量级锁 。&lt;/p>
&lt;p>需要注意的是，锁一旦升级为重量级锁后&lt;strong>不会自动回退&lt;/strong>为轻量级或偏向锁；只有在类级别触发批量重偏向（&lt;em>rebias&lt;/em>）或关闭偏向锁时，未来新对象才能再次使用偏向锁 。在需要性能分析时，可使用 JVM 提供的工具（如 jstack、Java Flight Recorder、JVMTI 接口或 JVisualVM 的锁监控功能）来查看锁竞争和升级情况，直观了解不同锁状态下的行为。&lt;/p>
&lt;h2 id="三各种锁的关系与适用场景">&lt;strong>三、各种锁的关系与适用场景&lt;/strong>
&lt;/h2>&lt;p>Java 提供了多种锁机制：内置的 synchronized 关键字、java.util.concurrent.locks 包下的锁（如 ReentrantLock、ReentrantReadWriteLock）以及原子操作（CAS）等。它们之间的关系和适用场景如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Synchronized 与 ReentrantLock：&lt;/strong> 两者本质都是可重入的互斥锁。synchronized 是 Java 关键字，在 JVM 层面通过监视器（monitorenter/monitorexit）实现，不需要显式释放锁，执行完同步块后自动解锁；而 ReentrantLock 是 JDK 1.5 引入的锁实现，需要手动 lock() / unlock() 。从底层实现看，synchronized 利用了 JDK6+ 的锁优化（偏向锁、自旋、重量级锁等），而 ReentrantLock 基于 AQS 框架，使用 CAS + 自旋和队列实现 。
&lt;ul>
&lt;li>
&lt;p>ReentrantLock 支持&lt;strong>公平锁&lt;/strong>和&lt;strong>非公平锁&lt;/strong>模式（构造函数中可选），而 synchronized 只支持非公平调度 。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ReentrantLock 可以响应中断（ &lt;strong>lockInterruptibly()&lt;/strong> ）或尝试超时获取锁（ &lt;strong>tryLock(long, TimeUnit)&lt;/strong> ），而 synchronized 不支持线程中断获取锁 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReentrantLock 支持绑定 Condition（条件队列），可实现更灵活的等待/通知，而 synchronized 只能使用 Object.wait()/notify() 机制 。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// synchronized 示例&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">synchronized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">incrementSync&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 自动加锁和释放&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// ReentrantLock 示例&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ReentrantLock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// true 表示公平锁&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">incrementLock&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 需要手动释放锁&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">finally&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">unlock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在高并发场景下，ReentrantLock 提供了更灵活的特性，因此通常推荐使用 。例如，可以选择非公平模式以提高吞吐量，也可以在需要时使用超时或可中断锁。但 synchronized 使用更简单，JVM 优化极好，在无竞争或轻度竞争时性能也非常高 。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>非公平锁为什么比公平锁吞吐量高&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>非公平锁&lt;strong>减少了线程切换&lt;/strong>：
&lt;ul>
&lt;li>新线程直接竞争成功就进入临界区，少一次上下文切换。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>公平锁需要：
&lt;ul>
&lt;li>判断自己是否是队列头（多一次检查）。&lt;/li>
&lt;li>如果不是，就必须等待——导致线程更多地陷入等待/唤醒，增加系统负担。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非公平锁利用&lt;strong>随机性&lt;/strong>：系统调度新线程拿到锁后，可能比排队线程更快执行完，从而总体提高吞吐量。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>乐观锁 vs 悲观锁（CAS vs 同步锁）：&lt;/strong> 悲观锁假设会发生冲突，每次访问共享数据前都会上锁（如 synchronized、ReentrantLock） ；乐观锁则假设冲突很少，仅在提交时通过某种机制验证（如 CAS）是否成功 。Java 的原子类（如 AtomicInteger）即使用 CAS + volatile 来实现非阻塞的乐观并发。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// CAS 乐观锁示例：AtomicInteger&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">AtomicInteger&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicInteger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">incrementAndGet&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 底层使用 CAS 保证原子性&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>在 AtomicInteger 内部，核心实现依赖于 &lt;strong>sun.misc.Unsafe&lt;/strong> 类（JDK 9+ 是 jdk.internal.misc.Unsafe）。&lt;/p>
&lt;p>Unsafe 提供了底层的 compareAndSwapInt 等方法。&lt;/p>
&lt;p>来看一个简化版伪代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">AtomicInteger&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">volatile&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">incrementAndGet&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(;;)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 无限循环直到成功&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">compareAndSet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">compareAndSet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// compare and swap 缩写 CAS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">compareAndSwapInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">valueOffset&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>具体过程&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当线程 A 调用 incrementAndGet() 时：
&lt;ul>
&lt;li>会先 get() 当前值：这里要读取 value&lt;/li>
&lt;li>另一个线程 B 也可能修改 value&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>因为 value 是 volatile：
&lt;ul>
&lt;li>保证了线程 A 读取 value 时，一定能读到主内存中&lt;strong>最新&lt;/strong>的值（而不是线程本地工作内存的旧值）&lt;/li>
&lt;li>当线程 B 更新 value 后，立即对线程 A 可见&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>然后 CAS 操作：
&lt;ul>
&lt;li>compareAndSwapInt 在比较时，也能保证看到最新的值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>为什么保证原子性&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>compareAndSwapInt 是 CPU 的原子指令，不可被打断&lt;/li>
&lt;li>无论多少线程同时执行，只有一个线程的 CAS 能成功&lt;/li>
&lt;li>失败的线程检测到值变化，就重试，直到成功&lt;/li>
&lt;li>volatile 保证 value 的读取永远是最新值&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>CAS 的优点是不涉及操作系统阻塞，适合竞争不激烈、多核场景下的高吞吐量操作 ；缺点是循环重试可能导致 CPU 空转，并存在 ABA 问题。悲观锁则通过阻塞等待保证安全，多用于写操作频繁的场景 。实际应用中，可视情况混合使用：读多写少时可采用读写锁，更新计数等操作可使用 LongAdder/AtomicInteger 等原子类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自旋锁与阻塞锁：&lt;/strong> 轻量级锁本质是一种自旋锁，它让等待的线程在用户态循环尝试获取锁而不进入内核阻塞 。自旋锁适用于锁持有时间极短的场景，可减少线程切换开销，但若持锁时间较长或线程数过多，会浪费大量 CPU。与之相对，重量级锁采用阻塞（park）机制，适合长时间等待但会有上下文切换开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>读写锁（ReentrantReadWriteLock）：&lt;/strong> 读写锁维护一对锁，一个读锁一个写锁。多个读线程可同时持有读锁（共享），而写锁是独占的。持有写锁的线程可以降级为读锁（即先获取写锁再获取读锁，然后释放写锁） 。读写锁通常用于读多写少的场景，可显著提高并发性能。但若写操作很多，则读写锁的开销可能高于普通互斥锁，因为需要维护更多状态。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ReentrantReadWriteLock 示例：读多写少场景&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">ReentrantReadWriteLock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rwLock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ReentrantReadWriteLock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">readLock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rwLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">readLock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">writeLock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rwLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">writeLock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 读方法&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">doRead&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">readLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 读共享资源&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">finally&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">readLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">unlock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 写方法&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">doWrite&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">writeLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 写共享资源&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">finally&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">writeLock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">unlock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>公平锁 vs 非公平锁：&lt;/strong> 公平锁（new ReentrantLock(true)）按照线程请求顺序授予锁，避免饥饿；非公平锁则可能让新线程“插队”抢锁，从而通常具有更高的吞吐量。synchronized 以及默认的 ReentrantLock 为非公平策略。高并发场景下，非公平锁性能更优，但在需要严格顺序时应使用公平锁 。&lt;/li>
&lt;/ul>
&lt;p>综上所述，在高并发/低延迟系统中，&lt;strong>选择合适的锁策略非常关键&lt;/strong>：volatile 适合于简单的状态标志；原子类（CAS）适合于无锁计数；synchronized 简洁高效、自动释放，适合锁竞争较轻或场景简单；ReentrantLock 则提供更多特性和可调性；读写锁适用于读多写少场景；自旋锁（如轻量级锁）适合短时锁定，否则应切换到阻塞锁避免资源浪费。具体使用时应权衡吞吐量与延迟开销，比如在超低延迟场合尽量避免阻塞、使用非公平锁；在公平性要求高的场合选择公平锁或其他协调方式。&lt;/p>
&lt;p>&lt;strong>参考资料：&lt;/strong> 对于 JMM 和锁机制的深入原理，可参考 JSR-133 提案和 OpenJDK 文档，以及相关文章 等。上述讨论结合实际例子和 HotSpot 实现机制。&lt;/p></description></item><item><title>Java 线程池详解</title><link>https://cyber-blog.github.io/p/java-threadpool-details/</link><pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate><author>majiang213@foxmail.com (majiang)</author><guid>https://cyber-blog.github.io/p/java-threadpool-details/</guid><description>&lt;h1 id="java-线程池详解">Java 线程池详解
&lt;/h1>&lt;p>Java 中的线程池是并发编程中非常重要的一部分，用于提高程序的性能和资源利用率，减少频繁创建和销毁线程的开销。本文将循序渐进地介绍 Java 线程池的构造参数、常见类型及其适用场景，帮助开发者选择和配置合适的线程池。&lt;/p>
&lt;hr>
&lt;h2 id="一线程池基础threadpoolexecutor-构造函数">一、线程池基础：ThreadPoolExecutor 构造函数
&lt;/h2>&lt;p>Java 提供了 &lt;code>ThreadPoolExecutor&lt;/code> 类用于自定义线程池，其构造函数如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">corePoolSize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">maximumPoolSize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keepAliveTime&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unit&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">BlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">workQueue&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ThreadFactory&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">threadFactory&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">RejectedExecutionHandler&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="参数详解">参数详解
&lt;/h3>&lt;h4 id="1-corepoolsize核心线程数">1. corePoolSize（核心线程数）
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>线程池中始终保留的线程数量，即使空闲也不会被销毁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当任务提交时，如果当前线程数小于 corePoolSize，会创建新线程处理任务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="2-maximumpoolsize最大线程数">2. maximumPoolSize（最大线程数）
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>线程池允许的最大线程数量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当队列已满且线程数小于 maximumPoolSize 时，线程池会创建新线程处理任务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="3-keepalivetime--unit空闲线程最大存活时间">3. keepAliveTime + unit（空闲线程最大存活时间）
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>非核心线程在空闲时间超过此值时会被回收。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认对核心线程无效，可通过 &lt;code>allowCoreThreadTimeOut(true)&lt;/code> 启用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="4-workqueue任务等待队列">4. workQueue（任务等待队列）
&lt;/h4>&lt;p>用于缓存等待执行的任务，常见实现：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>特点&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ArrayBlockingQueue&lt;/td>
&lt;td>有界，FIFO&lt;/td>
&lt;td>控制内存使用，防止 OOM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LinkedBlockingQueue&lt;/td>
&lt;td>默认无界&lt;/td>
&lt;td>默认队列类型，需防范内存泄漏风险&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SynchronousQueue&lt;/td>
&lt;td>不缓存任务&lt;/td>
&lt;td>高并发、短任务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PriorityBlockingQueue&lt;/td>
&lt;td>支持任务优先级&lt;/td>
&lt;td>有优先级需求的场景&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="5-threadfactory线程工厂">5. threadFactory（线程工厂）
&lt;/h4>&lt;ul>
&lt;li>用于自定义线程创建逻辑，如命名、守护线程设置等。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ThreadFactory&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicInteger&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicInteger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">newThread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;MyThread-&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getAndIncrement&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="6-handler拒绝策略">6. handler（拒绝策略）
&lt;/h4>&lt;ul>
&lt;li>当线程池和队列已满时，任务提交会触发拒绝策略。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>策略类&lt;/th>
&lt;th>行为&lt;/th>
&lt;th>是否抛异常&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AbortPolicy&lt;/td>
&lt;td>抛出异常&lt;/td>
&lt;td>✅ 是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CallerRunsPolicy&lt;/td>
&lt;td>由调用者线程执行&lt;/td>
&lt;td>❌ 否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DiscardPolicy&lt;/td>
&lt;td>直接丢弃任务&lt;/td>
&lt;td>❌ 否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DiscardOldestPolicy&lt;/td>
&lt;td>丢弃队列中最旧的任务&lt;/td>
&lt;td>❌ 否&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="二任务处理流程简化逻辑">二、任务处理流程（简化逻辑）
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> +------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 提交任务 executor.execute() |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---------------+--------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-------------+--------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 当前线程数 &amp;lt; corePoolSize ? |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-------------+--------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 是
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 创建线程立即执行任务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 否
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-------------+--------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 队列未满？（workQueue） |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-------------+--------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 是
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 放入队列等待
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 否
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +--------------+-------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 当前线程数 &amp;lt; maximumPoolSize ? |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +--------------+-------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 是
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 创建线程立即执行任务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 否
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 触发拒绝策略（handler）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="三executors-提供的线程池工厂方法">三、Executors 提供的线程池工厂方法
&lt;/h2>&lt;p>除了手动创建线程池，Java 提供了 &lt;code>Executors&lt;/code> 工具类简化常见线程池的创建方式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>方法&lt;/th>
&lt;th>特点&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>固定线程池&lt;/td>
&lt;td>&lt;code>Executors.newFixedThreadPool(n)&lt;/code>&lt;/td>
&lt;td>固定线程数，无界队列&lt;/td>
&lt;td>稳定任务量，控制并发&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>缓存线程池&lt;/td>
&lt;td>&lt;code>Executors.newCachedThreadPool()&lt;/code>&lt;/td>
&lt;td>无限线程数，空闲线程回收&lt;/td>
&lt;td>高并发、短任务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>单线程池&lt;/td>
&lt;td>&lt;code>Executors.newSingleThreadExecutor()&lt;/code>&lt;/td>
&lt;td>单线程顺序执行&lt;/td>
&lt;td>日志、事务顺序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>定时线程池&lt;/td>
&lt;td>&lt;code>Executors.newScheduledThreadPool(n)&lt;/code>&lt;/td>
&lt;td>支持定时与周期任务&lt;/td>
&lt;td>定时任务处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>单线程定时池&lt;/td>
&lt;td>&lt;code>Executors.newSingleThreadScheduledExecutor()&lt;/code>&lt;/td>
&lt;td>单线程定时任务&lt;/td>
&lt;td>严格顺序定时任务&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="各线程池使用示例与说明">各线程池使用示例与说明
&lt;/h3>&lt;h4 id="1-fixedthreadpool">1. FixedThreadPool
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ExecutorService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newFixedThreadPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>固定线程数，线程不会被销毁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用无界队列，需注意任务积压可能导致 OOM。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="2-cachedthreadpool">2. CachedThreadPool
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ExecutorService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newCachedThreadPool&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>无限线程创建，适合短期高并发任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>SynchronousQueue&lt;/code>，不会缓存任务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="3-singlethreadexecutor">3. SingleThreadExecutor
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ExecutorService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>单线程执行所有任务，保证顺序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可用于串行化控制任务执行顺序。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="4-scheduledthreadpool">4. ScheduledThreadPool
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ScheduledExecutorService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newScheduledThreadPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>支持延迟和周期性执行任务：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">pool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">schedule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">scheduleAtFixedRate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="5-singlethreadscheduledexecutor">5. SingleThreadScheduledExecutor
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ScheduledExecutorService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newSingleThreadScheduledExecutor&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>单线程定时任务调度器，适用于需要顺序和定时的任务。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="四executors-工厂方法的潜在风险">四、Executors 工厂方法的潜在风险
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>FixedThreadPool 和 SingleThreadExecutor 使用 &lt;strong>无界队列&lt;/strong>，任务堆积可能导致内存溢出；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CachedThreadPool 最大线程数无限制，线程创建过多可能引发 OOM；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="-推荐实践">✅ 推荐实践
&lt;/h3>&lt;blockquote>
&lt;p>明确指定线程池参数，避免默认配置带来的不确定性。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">executor&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayBlockingQueue&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">defaultThreadFactory&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">AbortPolicy&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="五总结与建议">五、总结与建议
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>对于一般项目，推荐根据任务特性合理配置 ThreadPoolExecutor；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Executors 提供的快捷工厂方法方便但存在默认值陷阱；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程池需监控运行状态，避免资源耗尽或任务堆积；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>定期评估线程池的负载情况，调整配置参数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>使用线程池是一项系统工程，需要根据任务类型、系统资源、服务目标进行细致规划与调优。&lt;/p></description></item><item><title>MacOS自行编译JDK</title><link>https://cyber-blog.github.io/p/macos-compile-jdk/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><author>majiang213@foxmail.com (majiang)</author><guid>https://cyber-blog.github.io/p/macos-compile-jdk/</guid><description>&lt;img src="https://cyber-blog.github.io/p/macos-compile-jdk/cover.png" alt="Featured image of post MacOS自行编译JDK" />&lt;p>M1 macOS Monterey 12.6 (21G115)
Xcode版本14.0.1&lt;/p>
&lt;p>JDK版本17&lt;/p>
&lt;ol>
&lt;li>
&lt;p>初始化配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">bash configure --enable-debug --with-jvm-variants&lt;span class="o">=&lt;/span>client,server --disable-warnings-as-errors
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>编译&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>遇到的坑
&lt;a class="link" href="https://bugs.openjdk.org/browse/JDK-8272700" target="_blank" rel="noopener"
>https://bugs.openjdk.org/browse/JDK-8272700&lt;/a>
&lt;a class="link" href="https://github.com/tarantool/tarantool/issues/6576" target="_blank" rel="noopener"
>https://github.com/tarantool/tarantool/issues/6576&lt;/a>
切换为jdk17u-dev之后的问题
&lt;a class="link" href="https://bugs.openjdk.org/browse/JDK-8283221" target="_blank" rel="noopener"
>https://bugs.openjdk.org/browse/JDK-8283221&lt;/a>&lt;/p>
&lt;p>详细配置和步骤参考&lt;a class="link" href="https://openjdk.org/groups/build/" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;p>Xcode版本过新参考&lt;/p>
&lt;blockquote>
&lt;p>Problems with the Build Environment
Make sure your configuration is correct. Re-run configure, and look for any warnings. Warnings that appear in the middle of the configure output is also repeated at the end, after the summary. The entire log is stored in $BUILD/configure.log.&lt;/p>
&lt;p>Verify that the summary at the end looks correct. Are you indeed using the Boot JDK and native toolchain that you expect?&lt;/p>
&lt;p>By default, the JDK has a strict approach where warnings from the compiler is considered errors which fail the build. For very new or very old compiler versions, this can trigger new classes of warnings, which thus fails the build. Run configure with &amp;ndash;disable-warnings-as-errors to turn of this behavior. (The warnings will still show, but not make the build fail.)&lt;/p>
&lt;/blockquote></description></item><item><title>JVM自动内存管理和垃圾回收</title><link>https://cyber-blog.github.io/p/jvm-gc/</link><pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate><author>majiang213@foxmail.com (majiang)</author><guid>https://cyber-blog.github.io/p/jvm-gc/</guid><description>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/cover.png" alt="Featured image of post JVM自动内存管理和垃圾回收" />&lt;p>Java 与 C++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人 想进去，墙里面的人却想出来。&lt;/p>
&lt;p>对于从事 C、C++程序开发的开发人员来说，在内存管理领域，他们既是拥有最高 权力的“皇帝”，又是从事最基础工作的劳动人民——既拥有每一个对象的“所有权”，又 担负着每一个对象生命从开始到终结的维护责任。&lt;/p>
&lt;p>对于 Java 程序员来说，在虚拟机自动内存管理机制的帮助下，不再需要为每一个 new 操作去写配对的 delete/free 代码，不容易出现内存泄漏和内存溢出问题，看起来由 虚拟机管理内存一切都很美好。不过，也正是因为 Java 程序员把控制内存的权力交给了 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存 的，那排查错误、修正问题将会成为一项异常艰难的工作。&lt;/p>
&lt;h2 id="java内存区域及相关异常">Java内存区域及相关异常
&lt;/h2>&lt;p>Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据 区域。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机 进程的启 动而一直存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范》的规定，Java 虚拟机所管理的内存将会包括以下几个运行时数据区域，如图&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png"
width="537"
height="437"
srcset="https://cyber-blog.github.io/p/jvm-gc/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA_hu17737948876212090813.png 480w, https://cyber-blog.github.io/p/jvm-gc/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA_hu5916409478959816616.png 1024w"
loading="lazy"
alt="企业微信截图_36d574f4-a689-4a83-8f5a-bb16cdb72165"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;h4 id="程序计数器">程序计数器
&lt;/h4>&lt;p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当 前线程所执行的字节码的行号指示器。在 Java 虚拟机的概念模型里 ，字节码解释器工 作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数 器来完成。&lt;/p>
&lt;p>由于 Java 虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需 要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内 存区域为“线程私有”的内存。&lt;/p>
&lt;p>如果线程正在执行的是一个 Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何 OutOfMemoryError 情况的区域。&lt;/p>
&lt;h4 id="java虚拟机栈">Java虚拟机栈
&lt;/h4>&lt;p>与程序计数器一样，Java 虚拟机栈（Java Virtual Machine Stack）也是线程私有的， 它的生命周期与线程相同。虚拟机栈描述的是 Java 方法执行的线程内存模型：每个方法被执行的时候，Java 虚拟机都会同步创建一个&lt;strong>栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息&lt;/strong>。每一个方法被调用直至执行完毕的过程， 就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。也就是说， &lt;strong>栈帧随着方法调用而创建，随着方法结束而销毁。无论方法正常完成还是异常完成都算作方法结束。&lt;/strong>&lt;/p>
&lt;p>经常有人把 Java 内存区域笼统地划分为堆内存（Heap）和栈内存（Stack），虽然这种在 Java 语言里就显得有些粗糙了，实际的内存区域划分要比这更复杂。不过这种划分方式的流行也间接说明了程序员最关注的、与对象内存分配关系最密切的区域是“堆”和“栈”两块。其中，“堆”在稍后会讲述，而“栈”通常就是指这里讲的虚拟机栈，或者更多的情况下只是指虚拟机栈中局部变量表部分。&lt;/p>
&lt;p>&lt;strong>局部变量表存放了编译期可知的各种 Java 虚拟机基本数据类型（&lt;code>boolean&lt;/code>、&lt;code>byte&lt;/code>、 &lt;code>char&lt;/code>、&lt;code>short&lt;/code>、&lt;code>int&lt;/code>、 &lt;code>float&lt;/code>、&lt;code>long&lt;/code>、&lt;code>double&lt;/code>）、对象引用（&lt;code>reference&lt;/code> 类型，它并不等同于对象 本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和 &lt;code>returnAddress&lt;/code>类型&lt;/strong>（指向了一条字节码指令的地址）。&lt;/p>
&lt;p>这些数据类型在局部变量表中的存储空间以局部变量槽（Slot）来表示，其中 64 位 长度的 long 和 double 类型的数据会占用两个变量槽，其余的数据类型只占用一个。局 部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的变量槽数量。请注意，实际上虚拟机真正使用多大的内存空间 （譬如按照 1 个变量槽占用 32 个比特、64 个比特，或者更多）来实现一个变量槽，这是完全由具体的虚拟机实现自行决定，不同的虚拟机或不同虚拟机版本都有可能不一致（也可通过&lt;code>-Xss&lt;/code>参数手动设置）。&lt;/p>
&lt;p>在《Java虚拟机规范》中，对这个内存区域规定了两类异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 &lt;code>StackOverflowError&lt;/code> 异常；当线程无法申请到足够的栈空间会抛出&lt;code>OutOfMemoryError&lt;/code> 异常。&lt;/p>
&lt;h4 id="本地方法栈">本地方法栈
&lt;/h4>&lt;p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其&lt;strong>区别只是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务&lt;/strong>。&lt;/p>
&lt;p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。&lt;/p>
&lt;p>与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出 &lt;code>StackOverflowError&lt;/code> 和 &lt;code>OutOfMemoryError&lt;/code> 异常。&lt;/p>
&lt;h4 id="java-堆">Java 堆
&lt;/h4>&lt;p>对于 Java 应用程序来说，Java 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。&lt;strong>此内存区域的唯 一目的就是存放对象实例&lt;/strong>，Java 世界里“几乎”所有的对象实例都在这里分配内存。在 《Java 虚拟机规范》中对 Java 堆的描述是：“所有的对象实例以及数组都应当在堆上分配”。&lt;/p>
&lt;p>Java 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆” （Garbage Collected Heap）。&lt;/p>
&lt;p>在 JDK 7 版本及 JDK 7 版本之前，堆内存被通常分为下面三部分&lt;/p>
&lt;ol>
&lt;li>新生代内存(Young Generation)&lt;/li>
&lt;li>老生代(Old Generation)&lt;/li>
&lt;li>永久代(Permanent Generation)&lt;/li>
&lt;/ol>
&lt;p>下图所示的 Eden 区、两个 Survivor 区 S0 和 S1 都属于新生代，中间一层属于老年代，最下面一层属于永久代。&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/hotspot-heap-structure.png"
width="871"
height="415"
srcset="https://cyber-blog.github.io/p/jvm-gc/hotspot-heap-structure_hu17137517858372991979.png 480w, https://cyber-blog.github.io/p/jvm-gc/hotspot-heap-structure_hu4299545695031397653.png 1024w"
loading="lazy"
alt="hotspot-heap-structure"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="503px"
>&lt;/p>
&lt;p>&lt;strong>JDK 8 版本之后 PermGen(永久) 已被 Metaspace(元空间) 取代，元空间使用的是直接内存&lt;/strong>&lt;/p>
&lt;p>大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 S0 或者 S1，并且对象的年龄还会加 1(Eden 区-&amp;gt;Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 &lt;code>-XX:MaxTenuringThreshold&lt;/code> 来设置。&lt;/p>
&lt;blockquote>
&lt;p>在十年之前（以 G1 收集器的出现为分界），作为业界绝对主 流的 HotSpot 虚拟机，它内部的垃圾收集器全部都基于“经典分代”来设计，需要新生代、老年代收集器搭配才能工作，在这种背景下，上述说法还算是不会产生太大歧义。 但是到了今天，垃圾收集器技术与十年前已不可同日而语，HotSpot 里面也出现了不采用分代设计的新垃圾收集器，再按照上面的提法就有很多需要商榷的地方了。&lt;/p>
&lt;/blockquote>
&lt;p>堆这里最容易出现的就是 &lt;code>OutOfMemoryError&lt;/code> 错误，并且出现这种错误之后的表现形式还会有几种，比如：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>&lt;code>java.lang.OutOfMemoryError: GC Overhead Limit Exceeded&lt;/code>&lt;/strong> ： 当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。&lt;/li>
&lt;li>&lt;strong>&lt;code>java.lang.OutOfMemoryError: Java heap space&lt;/code>&lt;/strong> :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发此错误。(和配置的最大堆内存有关，且受制于物理内存大小。最大堆内存可通过&lt;code>-Xmx&lt;/code>参数配置，若没有特别配置，将会使用默认值，详见：&lt;a class="link" href="https://stackoverflow.com/questions/28272923/default-xmxsize-in-java-8-max-heap-size" target="_blank" rel="noopener"
>Default Java 8 max heap sizeopen in new window&lt;/a>)&lt;/li>
&lt;/ol>
&lt;h4 id="方法区">方法区
&lt;/h4>&lt;p>方法区（Method Area）与 Java 堆一样，属于是 JVM 运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。&lt;/p>
&lt;p>虽然《Java 虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作“非堆”（Non-Heap），目的是与 Java 堆区分开来。&lt;/p>
&lt;p>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，方法区到底要如何实现那就是虚拟机自己要考虑的事情了。也就是说，在不同的虚拟机实现上，方法区的实现是不同的。&lt;/p>
&lt;p>当虚拟机要使用一个类时，它需要读取并解析 Class 文件获取相关信息，再将信息存入到方法区。方法区会存储已被虚拟机加载的 &lt;strong>类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据&lt;/strong>。&lt;/p>
&lt;p>说到方法区，不得不提一下“永久代”这个概念，尤其是在 JDK 8 以前，许多 Java 程序员都习惯在 HotSpot 虚拟机上开发、部署程序，很多人都更愿意把方法区称呼为“永久 代”（Permanent Generation），或将两者混为一谈。本质上这两者并不是等价的，因为仅 仅是当时的 HotSpot 虚拟机设计团队选择把收集器的分代设计扩展至方法区，或者说使 用永久代来实现方法区而已，这样使得 HotSpot 的垃圾收集器能够像管理 Java 堆一样管 理这部分内存，省去专门为方法区编写内存管理代码的工作。但是对于其他虚拟机实 现，譬如 BEA JRockit、IBM J9 等来说，是不存在永久代的概念的。原则上如何实现方 法区属于虚拟机实现细节，不受《Java 虚拟机规范》管束，并不要求统一。&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/method-area-implementation.png"
width="522"
height="241"
srcset="https://cyber-blog.github.io/p/jvm-gc/method-area-implementation_hu10537174668298361964.png 480w, https://cyber-blog.github.io/p/jvm-gc/method-area-implementation_hu16144775523291582240.png 1024w"
loading="lazy"
alt="HotSpot 虚拟机方法区的两种实现"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="519px"
>&lt;/p>
&lt;p>但现在回头来看，当年使用永久代来实现方法区的决定并不是一个好主意。&lt;/p>
&lt;ol>
&lt;li>这种设计导致了 Java 应 用更容易遇到内存溢出的问题（永久代有-XX：MaxPermSize 的上限，即使不设置也有 默认大小，而 J9 和 JRockit 只要没有触碰到进程可用内存的上限，例如 32 位系统中的 4GB 限制，就不会出问题）。&lt;/li>
&lt;li>当 Oracle 收购 BEA 获得了 JRockit （JRockit 从来没有一个叫永久代的东西）的所有权后， 准备把 JRockit 中的优秀功能，譬如 Java Mission Control 管理工具，移植到 HotSpot 虚拟机时，但因为两者对方法区实现的差异导致两者的代码合并起来较为困难。&lt;/li>
&lt;li>考虑到 HotSpot 未来的发 展，在 JDK 6 的时候 HotSpot 开发团队就有放弃永久代，逐步改为采用本地内存 （Native Memory）来实现方法区的计划了(&lt;a class="link" href="http://openjdk.java.net/jeps/122" target="_blank" rel="noopener"
>JEP 122-Remove the Permanent Generation&lt;/a>) ，到了 JDK 7 的 HotSpot，已经把原本放在 永久代的字符串常量池、静态变量等移出，而到了 JDK 8，终于完全废弃了永久代的概念，改用与 JRockit、J9 一样在本地内存中实现的元空间（Metaspace）来代替，把 JDK 7 中永久代还剩余的内容（主要是类型信息）全部移到元空间中。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>造成以上问题的原因是&lt;/strong>：&lt;/p>
&lt;p>《Java 虚拟机规范》对方法区的约束是非常宽松的，除了和 Java 堆一样不需要连续 的内存和可以选择固定大小或者可扩展外，甚至还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域的确是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收有时又确实是必要的。以前 Sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。&lt;/p>
&lt;p>&lt;strong>方法区常用参数有哪些？&lt;/strong>&lt;/p>
&lt;p>JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span>&lt;span class="n">XX&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">PermSize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//方法区 (永久代) 初始大小&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">XX&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">MaxPermSize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。&lt;/p>
&lt;p>JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了，取而代之是元空间，元空间使用的是直接内存。下面是一些常用参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span>&lt;span class="n">XX&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">MetaspaceSize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//设置 Metaspace 的初始（和最小大小）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">XX&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">MaxMetaspaceSize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//设置 Metaspace 的最大大小&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。&lt;/p>
&lt;p>根据《Java 虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出 OutOfMemoryError 异常。&lt;/p>
&lt;h4 id="运行时常量池">运行时常量池
&lt;/h4>&lt;p>运行时常量池（Runtime Constant Pool）是方法区的一部分。&lt;/p>
&lt;p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量（Literal）和符号引用（Symbolic Reference）的&lt;strong>常量池表(Constant Pool Table)&lt;/strong>，这部分内容将在类加载后存放到方法区的运行时常量池中。&lt;/p>
&lt;p>字面量是源代码中的固定值的表示法，即通过字面我们就能知道其值的含义。字面量包括整数、浮点数和字符串字面量，符号引用包括类符号引用、字段符号引用、方法符号引用和接口方法符号引用。&lt;/p>
&lt;p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 &lt;code>OutOfMemoryError&lt;/code> 异常。&lt;/p>
&lt;h4 id="字符串常量池">字符串常量池
&lt;/h4>&lt;p>&lt;strong>字符串常量池&lt;/strong> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在堆中创建字符串对象”ab“&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 将字符串对象”ab“的引用保存在字符串常量池中&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 直接返回字符串常量池中字符串对象”ab“的引用&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bb&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">aa&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">bb&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">// true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>HotSpot 虚拟机中字符串常量池的实现是 &lt;code>src/hotspot/share/classfile/stringTable.cpp&lt;/code> ,&lt;code>StringTable&lt;/code> 本质上就是一个&lt;code>HashSet&amp;lt;String&amp;gt;&lt;/code> ,容量为 &lt;code>StringTableSize&lt;/code>（可以通过 &lt;code>-XX:StringTableSize&lt;/code> 参数来设置）。&lt;/p>
&lt;p>&lt;strong>&lt;code>StringTable&lt;/code> 中保存的是字符串对象的引用，字符串对象的引用指向堆中的字符串对象。&lt;/strong>&lt;/p>
&lt;p>JDK1.7 之前，字符串常量池存放在永久代。JDK1.7 字符串常量池和静态变量从永久代移动了 Java 堆中。&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/method-area-jdk1.6.png"
width="751"
height="491"
srcset="https://cyber-blog.github.io/p/jvm-gc/method-area-jdk1.6_hu10068178214214736040.png 480w, https://cyber-blog.github.io/p/jvm-gc/method-area-jdk1.6_hu5631155658110574559.png 1024w"
loading="lazy"
alt="method-area-jdk1.7"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="367px"
>&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/method-area-jdk1.7.png"
width="751"
height="411"
srcset="https://cyber-blog.github.io/p/jvm-gc/method-area-jdk1.7_hu9515209095007396169.png 480w, https://cyber-blog.github.io/p/jvm-gc/method-area-jdk1.7_hu4541549841776974281.png 1024w"
loading="lazy"
alt="method-area-jdk1.7"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;p>&lt;strong>JDK 1.7 为什么要将字符串常量池移动到堆中？&lt;/strong>&lt;/p>
&lt;p>主要是因为永久代（方法区实现）的 GC 回收效率太低，只有在整堆收集 (Full GC)的时候才会被执行 GC。Java 程序中通常会有大量的被创建的字符串等待回收，将字符串常量池放到堆中，能够更高效及时地回收字符串内存。&lt;/p>
&lt;p>相关问题：&lt;a class="link" href="https://www.zhihu.com/question/57109429/answer/151717241" target="_blank" rel="noopener"
>JVM 常量池中存储的是对象还是引用呢？ - RednaxelaFX - 知乎open in new window&lt;/a>&lt;/p>
&lt;p>最后再来分享一段周志明老师在&lt;a class="link" href="https://github.com/fenixsoft/jvm_book" target="_blank" rel="noopener"
>《深入理解 Java 虚拟机（第 3 版）》样例代码&amp;amp;勘误open in new window&lt;/a> Github 仓库的 &lt;a class="link" href="https://github.com/fenixsoft/jvm_book/issues/112" target="_blank" rel="noopener"
>issue#112open in new window&lt;/a> 中说过的话：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>运行时常量池、方法区、字符串常量池这些都是不随虚拟机实现而改变的逻辑概念，是公共且抽象的，Metaspace、Heap 是与具体某种虚拟机实现相关的物理概念，是私有且具体的。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h4 id="直接内存">直接内存
&lt;/h4>&lt;p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是《Java 虚 拟机规范》中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致 OutOfMemoryError 异常出现，&lt;/p>
&lt;p>JDK1.4 中新加入的 &lt;strong>NIO(New Input/Output) 类&lt;/strong>，引入了一种基于&lt;strong>通道（Channel）与缓存区（Buffer）&lt;strong>的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为&lt;/strong>避免了在 Java 堆和 Native 堆之间来回复制数据&lt;/strong>。&lt;/p>
&lt;p>本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。&lt;/p>
&lt;h2 id="hotspot-虚拟机对象探秘">HotSpot 虚拟机对象探秘
&lt;/h2>&lt;p>通过上面的介绍我们大概知道了虚拟机的内存情况，下面我们来详细的了解一下 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。&lt;/p>
&lt;h3 id="对象的创建">对象的创建
&lt;/h3>&lt;p>Java 对象的创建过程我建议最好是能默写出来，并且要掌握每一步在做什么。&lt;/p>
&lt;h5 id="step1类加载检查">Step1:类加载检查
&lt;/h5>&lt;p>虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。&lt;/p>
&lt;h5 id="step2分配内存">Step2:分配内存
&lt;/h5>&lt;p>在&lt;strong>类加载检查&lt;/strong>通过后，接下来虚拟机将为新生对象&lt;strong>分配内存&lt;/strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。&lt;strong>分配方式&lt;/strong>有 &lt;strong>“指针碰撞”&lt;/strong> 和 &lt;strong>“空闲列表”&lt;/strong> 两种，&lt;strong>选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定（压缩功能取决于收集算法是&amp;quot;标记-清除&amp;quot;，还是&amp;quot;标记-整理&amp;quot;，值得注意的是，复制算法内存也是规整的）&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>内存分配的两种方式&lt;/strong> （补充内容，需要掌握）：&lt;/p>
&lt;ul>
&lt;li>指针碰撞 ：
&lt;ul>
&lt;li>适用场合 ：堆内存规整（即没有内存碎片）的情况下。&lt;/li>
&lt;li>原理 ：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可。&lt;/li>
&lt;li>使用该分配方式的 GC 收集器：Serial, ParNew&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>空闲列表 ：
&lt;ul>
&lt;li>适用场合 ： 堆内存不规整的情况下。&lt;/li>
&lt;li>原理 ：虚拟机会维护一个列表，该列表中会记录哪些内存块是可用的，在分配的时候，找一块儿足够大的内存块儿来划分给对象实例，最后更新列表记录。&lt;/li>
&lt;li>使用该分配方式的 GC 收集器：CMS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>内存分配并发问题&lt;/strong>&lt;/p>
&lt;p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，即使仅仅修改一个指针所指向的位置，在并发情况下也并不是线程安 全的，可能出现正在给对象 A 分配内存，指针还没来得及修改，对象 B 又同时使用了 原来的指针来分配内存的情况，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CAS+失败重试：&lt;/strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。&lt;strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>TLAB：&lt;/strong> 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配（虚拟机是否使用 TLAB，可以通过&lt;code>XX：+/-UseTLAB&lt;/code> 参数来设定）&lt;/li>
&lt;/ul>
&lt;h5 id="step3初始化零值">Step3:初始化零值
&lt;/h5>&lt;p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。&lt;/p>
&lt;h5 id="step4设置对象头">Step4:设置对象头
&lt;/h5>&lt;p>初始化零值完成之后，&lt;strong>虚拟机要对对象进行必要的设置&lt;/strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 &lt;strong>这些信息存放在对象头中。&lt;/strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。&lt;/p>
&lt;h5 id="step5执行-init-方法">Step5:执行 init 方法
&lt;/h5>&lt;p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，&lt;code>&amp;lt;init&amp;gt;&lt;/code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 &lt;code>&amp;lt;init&amp;gt;&lt;/code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。&lt;/p>
&lt;h3 id="对象的内存布局">对象的内存布局
&lt;/h3>&lt;p>在 HotSpot 虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头 （Header）、实例数据（Instance Data）和对齐填充（Padding）。&lt;/p>
&lt;p>&lt;strong>对象头 （Header）&lt;/strong>&lt;/p>
&lt;p>HotSpot 虚拟机对象的对象头部分包括两类信息。&lt;/p>
&lt;ol>
&lt;li>用于存储对象自身的运 行时数据，如哈希码（HashCode）、GC 分代年龄、锁状态标志、线程持有的锁、偏向 线程 ID、偏向时间戳等，这部分数据的长度在 32 位和 64 位的虚拟机（未开启压缩指针）中分别为 32 个比特和 64 个比特，官方称它为“Mark Word”。在 32 位的 HotSpot 虚拟机中，如对象未 被同步锁锁定的状态下，Mark Word 的 32 个比特存储空间中的 25 个比特用于存储对象 哈希码，4 个比特用于存储对象分代年龄，2 个比特用于存储锁标志位，1 个比特固定为 0。&lt;/li>
&lt;li>对象头的另外一部分是类型指针，即对象指向它的类型元数据的指针，Java 虚拟机通过这个指针来确定该对象是哪个类的实例。此外，如果对象是一个 Java 数组，那在对象头中还必须有一 块用于记录数组长度的数据，因为虚拟机可以通过普通 Java 对象的元数据信息确定 Java 对象的大小，但是如果数组的长度是不确定的，将无法通过元数据中的信息推断出数组的大小。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>实例数据（Instance Data）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>实例数据部分是对象真正存储的有效信息&lt;/strong>，也是在程序中所定义的各种类型的字段内容。&lt;/p>
&lt;p>HotSpot 虚拟机默认的分配顺序为 longs/doubles、ints、shorts/chars、 bytes/booleans、oops（Ordinary Object Pointers，OOPs），从以上默认的分配策略中可以 看到，相同宽度的字段总是被分配到一起存放，在满足这个前提条件的情况下，在父类 中定义的变量会出现在子类之前。如果 HotSpot 虚拟机的+XX：CompactFields 参数值为 true（默认就为 true），那子类之中较窄的变量也允许插入父类变量的空隙之中，以节省出一点点空间。&lt;/p>
&lt;p>&lt;strong>对齐填充（Padding）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>这部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。&lt;/strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。&lt;/p>
&lt;h3 id="对象的访问定位">对象的访问定位
&lt;/h3>&lt;p>创建对象自然是为了后续使用该对象。由于 reference 类型在《Java 虚拟机规范》里面只规定了它是 一个指向对象的引用，并没有定义这个引用应该通过什么方式去定位、访问到堆中对象 的具体位置，所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有两种：&lt;strong>使用句柄&lt;/strong>、&lt;strong>直接指针&lt;/strong>。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>句柄&lt;/p>
&lt;p>如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与对象类型数据各自的具体地址信息&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/access-location-of-object-handle.png"
width="761"
height="491"
srcset="https://cyber-blog.github.io/p/jvm-gc/access-location-of-object-handle_hu7525033304901205049.png 480w, https://cyber-blog.github.io/p/jvm-gc/access-location-of-object-handle_hu8148368361119128895.png 1024w"
loading="lazy"
alt="对象的访问定位-使用句柄"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>直接指针&lt;/p>
&lt;p>如果使用直接指针访问，reference 中存储的直接就是对象的地址。&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/access-location-of-object-handle-direct-pointer.png"
width="761"
height="491"
srcset="https://cyber-blog.github.io/p/jvm-gc/access-location-of-object-handle-direct-pointer_hu5742003125535822660.png 480w, https://cyber-blog.github.io/p/jvm-gc/access-location-of-object-handle-direct-pointer_hu17489681019770444546.png 1024w"
loading="lazy"
alt="access-location-of-object-handle-direct-pointer"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这两种对象访问方式各有优势，使用句柄来访问的最大好处就是 reference 中存储的 是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变 句柄中的实例数据指针，而 reference 本身不需要被修改。&lt;/p>
&lt;p>使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本，就 HotSpot 虚拟机而言，它主要使用第二种方式进行对象访问，但从整个软件开发的范围来看，在各种语言、框架中使用句柄来访问的情 况也十分常见。&lt;/p>
&lt;h2 id="实战outofmemoryerror-异常">实战：OutOfMemoryError 异常
&lt;/h2>&lt;p>在《Java 虚拟机规范》的规定里，除了程序计数器外，虚拟机内存的其他几个运行 时区域都有发生 OutOfMemoryError（下文称 OOM）异常的可能，接下来将通过若干实例 来验证异常实际发生的代码场景，并且将初步介绍若干最基本的与自动内存管理子系统相关的 HotSpot 虚拟机参数。&lt;/p>
&lt;h3 id="堆溢出">堆溢出
&lt;/h3>&lt;p>Java 堆用于储存对象实例，我们只要不断地创建对象，并且保证 GC Roots 到对象 之间有可达路径来避免垃圾回收机制清除这些对象，那么随着对象数量的增加，总容量 触及最大堆的容量限制后就会产生内存溢出异常。&lt;/p>
&lt;p>以下代码中限制 Java 堆的大小为 20MB，不可扩展（将堆的最小值&lt;code>-Xms&lt;/code> 参数 与最大值&lt;code>-Xmx&lt;/code> 参数设置为一样即可避免堆自动扩展），通过参数 &lt;code>-XX:+HeapDumpOnOutOf-MemoryError&lt;/code> 可以让虚拟机在出现内存溢出异常的时候 Dump 出当前的内存堆转储快照以便进行事后分析 。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * VM Args：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @author zzm
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">HeapOOM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">OOMObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">OOMObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">OOMObject&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OOMObject&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">OutOfMemoryError&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Java&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">heap&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">space&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Dumping&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">heap&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">java_pid38436&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">hprof&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Heap&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dump&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">created&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">27710387&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">093&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">secs&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Java 堆内存的 OutOfMemoryError 异常是实际应用中最常见的内存溢出异常情况。 出现 Java 堆内存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟随进一步提示 “Java heap space”。&lt;/p>
&lt;p>要解决这个内存区域的异常，常规的处理方法是首先通过内存映像分析工具（如 Eclipse Memory Analyzer）对 Dump 出来的堆转储快照进行分析。第一步首先应确认内 存中导致 OOM 的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏 （Memory Leak）还是内存溢出（Memory Overflow）。&lt;/p>
&lt;p>如果是内存泄漏，可进一步通过工具查看泄漏对象到 GC Roots 的引用链，找到泄 漏对象是通过怎样的引用路径、与哪些 GC Roots 相关联，才导致垃圾收集器无法回收 它们，根据泄漏对象的类型信息以及它到 GC Roots 引用链的信息，一般可以比较准确 地定位到这些对象创建的位置，进而找出产生内存泄漏的代码的具体位置。&lt;/p>
&lt;p>如果不是内存泄漏，换句话说就是内存中的对象确实都是必须存活的，那就应当检 查 Java 虚拟机的堆参数（&lt;code>-Xmx&lt;/code> 与&lt;code>-Xms&lt;/code>）设置，与机器的内存对比，看看是否还有向上调整的空间。再从代码上检查是否存在某些对象生命周期过长、持有状态时间过长、存储结构设计不合理等情况，尽量减少程序运行期的内存消耗。&lt;/p>
&lt;h3 id="虚拟机栈和本地方法栈溢出">虚拟机栈和本地方法栈溢出
&lt;/h3>&lt;p>《Java 虚拟机规范》明确允许 Java 虚拟机实现自行选择是否支持栈的动态扩展，而 HotSpot 虚拟机的选择是不支持扩展，因此对于 HotSpot 来说，&lt;code>-Xoss&lt;/code> 参数（设置本地方法栈大小）虽然存在，但实际上是没有任何效果的，栈容量只能由 &lt;code>-Xss&lt;/code> 参数来设定。&lt;/p>
&lt;p>关于虚拟机栈和本地方法栈。在《Java 虚拟机规范》中描述了两种异常&lt;/p>
&lt;ol>
&lt;li>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出 &lt;code>StackOverflowError&lt;/code> 异常。&lt;/li>
&lt;li>如果虚拟机的栈内存允许动态扩展，当扩展栈容量无法申请到足够的内存时， 将抛出 &lt;code>OutOfMemoryError&lt;/code> 异常。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>HotSpot虚拟机是不支持扩展&lt;/strong>，所以除非在创建线程申请内存时就因无法获得足够内存而出现 &lt;code>OutOfMemoryError&lt;/code> 异常，否则在线程运行时是不会因为扩展而导致内存溢出的，只会因为栈容量无法容纳新的栈帧而导致 &lt;code>StackOverflowError&lt;/code> 异常。&lt;/p>
&lt;p>为了验证这点，我们可以做两个实验，先将实验范围限制在单线程中操作。&lt;/p>
&lt;p>尝试下面两种行为是否能让 HotSpot 虚拟机产生 &lt;code>OutOfMemoryError&lt;/code> 异常：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用&lt;code>-Xss&lt;/code>参数减少 栈内存容量&lt;/strong>&lt;/p>
&lt;p>&lt;strong>结果&lt;/strong>：抛出 &lt;code>StackOverflowError&lt;/code> 异常，异常出现时输出的堆栈深度相应缩小。&lt;/p>
&lt;p>首先，对第一种情况进行测试，具体如代码如下所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * VM Args：-Xss128k * * @author zzm
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">JavaVMStackSOF1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stackLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">stackLeak&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">stackLength&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">stackLeak&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">JavaVMStackSOF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oom&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JavaVMStackSOF&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">oom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stackLeak&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;stack length:&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stackLength&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">throw&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>运行结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">10830&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">StackOverflowError&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">mj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">jvmpractice&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stackLeak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">12&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">mj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">jvmpractice&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stackLeak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">13&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">mj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">jvmpractice&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stackLeak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">13&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于不同版本的 Java 虚拟机和不同的操作系统，&lt;strong>栈容量最小值会有所限制&lt;/strong>，这主要取决于操作系统内存分页大小。譬如上述方法中的参数&lt;code>-Xss128k&lt;/code> 可以正常用于 32 位 Windows 系统下的 JDK 6，但是如果用于 64 位 Windows 系统下的 JDK 11，则会提示 栈容量最小不能低于 180K，而在 Linux 下这个值则可能是 228K，如果低于这个最小限 制，HotSpot 虚拟器启动时会给出如下提示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">The&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">specified&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">too&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">small&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Specify&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">least&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">160k&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义了大量的本地变量，增大此方法帧中本地变量表的长度&lt;/strong>&lt;/p>
&lt;p>&lt;strong>结果&lt;/strong>：抛出 &lt;code>StackOverflowError&lt;/code> 异常，异常出现时输出的堆栈深度相应缩小。&lt;/p>
&lt;p>为了多占局部变量表空间，不得不定义一长串变量，具体如代码如下所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @author zzm
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">JavaVMStackSOF2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stackLength&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">test&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused12&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused13&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused14&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused17&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused18&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused19&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused22&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused23&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused24&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused25&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused26&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused27&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused28&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused29&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused30&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused31&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused33&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused34&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused35&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused36&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused37&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused38&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused39&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused40&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused41&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused42&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused43&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused44&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused45&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused46&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused47&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused48&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused49&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused50&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused51&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused52&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused53&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused54&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused55&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused56&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused57&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused58&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused59&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused61&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused62&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused63&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused65&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused66&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused67&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused68&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused69&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused70&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused71&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused72&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused73&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused74&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused75&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused76&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused77&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused78&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused79&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused81&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused82&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused83&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused84&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused85&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused86&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused87&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused88&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused89&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused90&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused91&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused92&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused93&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused94&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused95&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused96&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused97&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused98&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused99&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">stackLength&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">unused1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused22&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused23&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused24&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused25&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused26&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused27&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused28&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused29&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused30&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused31&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused33&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused34&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused35&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused36&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused37&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused38&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused39&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused40&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused41&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused42&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused43&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused44&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused45&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused46&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused47&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused48&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused49&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused50&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused51&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused52&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused53&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused54&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused55&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused56&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused57&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused58&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused59&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused60&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused61&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused62&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused63&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused64&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused65&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused66&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused67&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused68&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused69&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused70&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused71&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused72&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused73&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused74&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused75&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused76&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused77&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused78&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused79&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused80&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused81&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused82&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused83&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused84&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused85&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused86&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused87&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused88&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused89&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused90&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused91&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused92&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused93&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused94&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused95&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused96&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused97&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused98&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused99&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unused100&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Error&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;stack length:&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stackLength&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">throw&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>运行结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">7334&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">StackOverflowError&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">mj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">jvmpractice&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">14&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">mj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">jvmpractice&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">14&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">mj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">jvmpractice&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">14&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实验结果表明&lt;/strong>：&lt;/p>
&lt;p>无论是由于栈帧太大还是虚拟机栈容量太小，当新的栈帧内存无法分配的时候， HotSpot 虚拟机抛出的都是 &lt;code>StackOverflowError&lt;/code> 异常。可是如果在允许动态扩展栈容量大小的虚拟机上，相同代码则会导致不一样的情况。譬如远古时代的 Classic 虚拟机，这款虚拟机可以支持动态扩展栈内存的容量，在 Windows 上的 JDK 1.0.2 运行代码 &lt;code>JavaVMStackSOF2&lt;/code> 的话（如果这时候要调整栈容量就应该改用&lt;code>-oss&lt;/code> 参数了），得到的结果是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">3716&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">OutOfMemoryError&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">fenixsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">oom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">leak&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">27&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">fenixsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">oom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">leak&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">28&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">fenixsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">oom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">leak&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JavaVMStackSOF&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">28&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>额外情况：通过不断建立线程的方式，产生内存溢出&lt;/strong>&lt;/p>
&lt;p>结果：在栈空间不可扩展的 HotSpot 上产生内存溢出异常&lt;/p>
&lt;p>但是这样产生的内存溢出异常和栈空间是否足够并不存在任何直接的关系，主要取决于操作系统本身的内存使用状态。甚至可以说，在这种情况下，给每个线程的栈分配的内存越大，反而越 容易产生内存溢出异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * VM Args：-Xss2M （这时候不妨设大些，请在 32 位系统下运行）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @author zzm
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">JavaVMStackOOM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">dontStop&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">stackLeakByThread&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">dontStop&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">JavaVMStackOOM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oom&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JavaVMStackOOM&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">oom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stackLeakByThread&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">OutOfMemoryError&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">native&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>原因其实不难理解：操作系统分配给每个进程的内存是有限制的，那虚拟机栈和本地方法栈可用内存为总内存即为减去最大堆容量，再减去最大方法区容量，减去直接内存和虚拟机进程本身耗费的内存，剩下的内存就由虚拟机栈和本地方法栈来分配了。因此为每个线程分配到的栈内存越大，可以建立的线程数量自然就越少，建立线程时就越容易把剩下的内存耗尽，以下代码演示了这种情况&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>当出现 &lt;code>StackOverflowError&lt;/code> 异常时，会有明确错误堆栈可供分析，相对而言比较容易 定位到问题所在。&lt;/p>
&lt;p>&lt;strong>如果使用 HotSpot 虚拟机默认参数，栈深度在大多数情况下（因为每 个方法压入栈的帧大小并不是一样的，所以只能说大多数情况下）到达 1000~2000 的深度是完全没有问题&lt;/strong>，对于正常的方法调用（包括不能做尾递归优化的递归调用），这个深度应该完全够用了。&lt;/p>
&lt;p>但是，&lt;strong>如果是建立过多线程导致的内存溢出，在不能减少线程数量或者更换 64 位虚拟机的情况下，就只能通过减少最大堆和减少栈容量来换取更多的线程&lt;/strong>。 这种通过“减少内存”的手段来解决内存溢出的方式，如果没有这方面处理经验，一般比较难以想到，这一点读者需要在开发 32 位系统的多线程应用时注意。也是由于这种问 题较为隐蔽，从 JDK 7 起，以上提示信息中“unable to create native thread”后面，虚拟机会特别注明原因可能是“possibly out of memory or process/resource limits reached” 。&lt;/p>
&lt;h3 id="运行时常量池溢出">运行时常量池溢出
&lt;/h3>&lt;p>&lt;code>String::intern()&lt;/code>是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于 此 String 对象的字符串，则返回代表池中这个字符串的 String 对象的引用；否则，会将 此 String 对象包含的字符串添加到常量池中，并且返回此 String 对象的引用。&lt;/p>
&lt;p>&lt;strong>以下代码在 JDK 6 或更早之前的 HotSpot 虚拟机中，常量池都是分配在永久代中&lt;/strong>，我们可以通过&lt;code>-XX： PermSize&lt;/code> 和&lt;code>-XX：MaxPermSize&lt;/code> 限制永久代的大小，即可间接限制其中常量池的容量。&lt;/p>
&lt;p>而使用 JDK 7 或更高版本的 JDK 来运行这段程序并不会得到相同的结果，因为自 JDK 7 起，&lt;strong>原本存放在永久代的字符串常量池被移至 Java 堆之中&lt;/strong>，所以在 JDK 7 及以上版本，限制方法区的容量对该测试用例来说是毫无意义的。这时候使用 &lt;code>-Xmx&lt;/code> 参数限制最大堆到 6MB 就会出现&lt;code>Exception in thread &amp;quot;main&amp;quot; java.lang.OutOfMemoryError: Java heap space&lt;/code>异常&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * VM Args：-XX:PermSize=6M -XX:MaxPermSize=6M
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @author zzm
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">RuntimeConstantPoolOOM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 使用 Set 保持着常量池引用，避免 Full GC 回收常量池行为&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HashSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 在 short 范围内足以让 6MB 的 PermSize 产生 OOM 了&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">short&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">intern&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方法区溢出">方法区溢出
&lt;/h3>&lt;p>&lt;strong>方法区的主要职责是用于存放类型的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。对于这部分区域的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出为止&lt;/strong>。虽然直接使用 Java SE API 也可以动态产生类（如反射时的 &lt;code>GeneratedConstructorAccessor&lt;/code> 和动态代理等），但在本次实验中操作起来比较麻烦。在以下代码里借助了 &lt;code>CGLib&lt;/code> 直接操 作字节码运行时生成了大量的动态类。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * VM Args：-XX:PermSize=10M -XX:MaxPermSize=10M
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @author zzm
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">JavaMethodAreaOOM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Enhancer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Enhancer&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setSuperclass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">OOMObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setUseCache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MethodInterceptor&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">intercept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Method&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MethodProxy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proxy&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">invokeSuper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">enhancer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">OOMObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>值得特别注意的是，当前的很多主流框架，如 &lt;code>Spring&lt;/code>、&lt;code>Hibernate&lt;/code> 对类进行增强时，都会使用到 CGLib 这类字节码技术，当增强的类越多，就需要越大的方法区以保证动态生成的新类型可以载入内存。另外，很多运行于 Java 虚拟机上的动态语言 （例如 Groovy 等）通常都会持续创建新类型来支撑语言的动态性，一个类如果要被垃圾收集器回收，要达成的条件是比较苛刻的。在经常运行时生成大量动态类的应用场景里，就应该特别关注这些类的回收状况。&lt;/p>
&lt;p>&lt;strong>JDK7的运行结果:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">OutOfMemoryError&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PermGen&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">space&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Dumping&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">heap&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">java_pid46662&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">hprof&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Heap&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dump&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">created&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">5386258&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">029&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">secs&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 JDK 8 以后，永久代便完全退出了历史舞台，元空间作为其替代者登场。在 默认 设置下，前面列举的那些正常的动态创建新类型的测试用例已经很难再迫使虚拟机产生 方法区的溢出异常了。不过为了让使用者有预防实际应用里出现类似于上述代码那样的破坏性的操作，HotSpot 还是提供了一些参数作为元空间的防御措施，主要包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>-XX:MaxMetaspaceSize&lt;/code>&lt;/strong>：设置元空间最大值，默认是-1，即不限制，或者说只受 限于本地内存大小。&lt;/li>
&lt;li>&lt;strong>&lt;code>-XX:MetaspaceSize&lt;/code>&lt;/strong>：指定元空间的初始空间大小，以字节为单位，达到该值就会触发垃圾收集进行类型卸载，同时收集器会对该值进行调整：如果释放了大量的空间， 就适当降低该值；如果释放了很少的空间，那么在不超过&lt;code>-XX:MaxMetaspaceSize&lt;/code>（如 果设置了的话）的情况下，适当提高该值。&lt;/li>
&lt;li>&lt;strong>&lt;code>-XX:MinMetaspaceFreeRatio&lt;/code>&lt;/strong>：作用是在垃圾收集之后控制最小的元空间剩余容量 的百分比，可减少因为元空间不足导致的垃圾收集的频率。类似的还有&lt;code>-XX:MaxMetaspaceFreeRatio&lt;/code>，用于控制最大的元空间剩余容量的百分比。&lt;/li>
&lt;/ul>
&lt;h3 id="本机直接内存溢出">本机直接内存溢出
&lt;/h3>&lt;p>**直接内存（Direct Memory）**的容量大小可通过&lt;code>-XX:MaxDirectMemorySize&lt;/code> 参数来 指定，如果不去指定，则默认与 Java 堆最大值（由&lt;code>-Xmx&lt;/code> 指定）一致，以下代码越过了 &lt;code>DirectByteBuffer&lt;/code> 类直接通过反射获取 &lt;code>Unsafe&lt;/code> 实例进行内存分配（&lt;code>Unsafe&lt;/code> 类的 &lt;code>getUnsafe()&lt;/code>方法指定只有引导类加载器才会返回实例，体现了设计者希望只有虚拟机标准类库里面的类才能使用 Unsafe 的功能，在 JDK 10 时才将 &lt;code>Unsafe&lt;/code> 的部分功能通过 &lt;code>VarHandle&lt;/code> 开放给外部使用），因为虽然使用 DirectByteBuffer 分配内存也会抛出内存溢 出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配就会在代码里手动抛出溢出异常，真正申请分配内存的方法是 &lt;code>Unsafe::allocateMemory()&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * VM Args：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * -Xmx20M
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * -XX:MaxDirectMemorySize=10M
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @author zzm
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">DirectMemoryOOM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_1MB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1024&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1024&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Field&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unsafeField&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getDeclaredFields&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">unsafeField&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Unsafe&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unsafeField&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">allocateMemory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_1MB&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>运行结果：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">OutOfMemoryError&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sun&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">allocateMemory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Native&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Method&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">fenixsoft&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">oom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">DMOOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DMOOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">20&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由直接内存导致的内存溢出，一个明显的特征是在 Heap Dump 文件中不会看见有 什么明显的异常情况，如果发现内存溢出之后产生的 Dump 文件很小，而程序中又直接或间接使用了 DirectMemory（典型的间接使用就是 NIO），那就可以考虑重点检查一下直接内存方面的原因了。&lt;/p>
&lt;h2 id="jvm垃圾收集子系统详解">JVM垃圾收集子系统详解
&lt;/h2>&lt;p>Java内存模型的各部分当中的程序计数器、虚拟机栈、本地方法栈 3 个区域和线程绑定，栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的，因此这几个区域的内存分配和回收都具备确定性，在这几个区域内就不需要过多考虑如何回收的问题，当方法结束或者线程结束时，内存自然就跟随着回收了。&lt;/p>
&lt;p>而 Java 堆和方法区这两个区域则有着很显著的不确定性，只有处于运行期间，我们才能知道程序究竟会创建哪些对象，创建多少个对象，这部分内存的分配和回收是动态的。垃圾收集器所关注的正是这部分内存该如何管理。&lt;/p>
&lt;h3 id="死亡对象判断方法">死亡对象判断方法
&lt;/h3>&lt;p>堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对象）。&lt;/p>
&lt;h4 id="引用计数法">引用计数法
&lt;/h4>&lt;p>给对象中添加一个引用计数器：&lt;/p>
&lt;ul>
&lt;li>每当有一个地方引用它，计数器就加 1；&lt;/li>
&lt;li>当引用失效，计数器就减 1；&lt;/li>
&lt;li>任何时候计数器为 0 的对象就是不可能再被使用的。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>这个方法实现简单，效率高，也有很多使用这种方式进行内存管理的技术(如Python)、但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。&lt;/strong>&lt;/p>
&lt;p>所谓对象之间的相互引用问题，如下面代码所示：除了对象 &lt;code>objA&lt;/code> 和 &lt;code>objB&lt;/code> 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为 0，于是引用计数算法无法通知 GC 回收器回收他们。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ReferenceCountingGc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ReferenceCountingGc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">objA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ReferenceCountingGc&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ReferenceCountingGc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">objB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ReferenceCountingGc&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">objA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">objB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">objB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">objA&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">objA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">objB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="可达性分析算法">可达性分析算法
&lt;/h4>&lt;p>当前主流的商用程序语言（Java、C#，上溯至前面提到的古老的 Lisp）的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。这个算法的基本思想就是通过一系列的称为 &lt;strong>“GC Roots”&lt;/strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。&lt;/p>
&lt;p>下图中的 &lt;code>Object 6 ~ Object 10&lt;/code> 之间虽有引用关系，但它们到 GC Roots 不可达，因此为需要被回收的对象。&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/jvm-gc-roots.png"
width="812"
height="542"
srcset="https://cyber-blog.github.io/p/jvm-gc/jvm-gc-roots_hu7387869850895995300.png 480w, https://cyber-blog.github.io/p/jvm-gc/jvm-gc-roots_hu11468326864149135117.png 1024w"
loading="lazy"
alt="jvm-gc-roots"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>&lt;strong>固定可作为 GC Roots 的对象包括以下几种&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在方法区中类静态属性引用的对象，譬如 Java 类的引用类型静态变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在本地方法栈中 JNI（即通常所说的 Native 方法）引用的对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java 虚拟机内部的引用，如基本数据类型对应的 Class 对象，一些常驻的异常对象 （比如 &lt;code>NullPointExcepiton&lt;/code>、&lt;code>OutOfMemoryError&lt;/code>）等，还有系统类加载器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有被同步锁（&lt;code>synchronized&lt;/code> 关键字）持有的对象。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="引用类型">引用类型
&lt;/h5>&lt;p>无论是通过引用计数法判断对象引用数量，还是通过可达性分析法判断对象的引用链是否可达，判定对象的存活都与“引用”有关。&lt;/p>
&lt;p>JDK1.2 之前，Java 中引用的定义很传统：如果 reference 类型的数据存储的数值代表的是另一块内存的起始地址，就称这块内存代表一个引用。&lt;/p>
&lt;p>JDK1.2 以后，Java 对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种（引用强度逐渐减弱）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>强引用（StrongReference）&lt;/p>
&lt;p>以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于&lt;strong>必不可少的生活用品&lt;/strong>，垃圾回收器绝不会回收它。当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>软引用（SoftReference）&lt;/p>
&lt;p>如果一个对象只具有软引用，那就类似于&lt;strong>可有可无的生活用品&lt;/strong>。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。&lt;/p>
&lt;p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA 虚拟机就会把这个软引用加入到与之关联的引用队列中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>弱引用（WeakReference）&lt;/p>
&lt;p>&lt;strong>弱引用也用来描述那些非必须得对象，但是它的强度比软引用更弱一些&lt;/strong>。被弱引用关联的对象只能生存到下一次垃圾收集发生为止。在进行垃圾回收是，不管当前内存空间足够与否，都会回收它的内存。在 JDK 1.2 版之后提供了 &lt;code>WeakReference&lt;/code> 类来实现弱引用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>虚引用（PhantomReference）&lt;/p>
&lt;p>&amp;ldquo;虚引用&amp;quot;顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。&lt;/p>
&lt;p>&lt;strong>为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时 收到一个系统通知。&lt;/strong>&lt;/p>
&lt;p>在 JDK 1.2 版之后提供了 &lt;code>PhantomReference&lt;/code> 类来实现虚引用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="方法区回收">方法区回收
&lt;/h3>&lt;p>实际上《Java 虚拟机规范》中提到过可以不要求虚拟机在方法区中实现垃圾收集，事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 JDK 11 时期的 ZGC 收集器就不支持类卸载）。这也侧面反应了方法区的回收相对于堆来说不频繁，并且回收条件苛刻。&lt;/p>
&lt;p>&lt;strong>方法区的垃圾收集主要回收两部分内容：废弃的常量和不再使用的类型。&lt;/strong>&lt;/p>
&lt;h4 id="如何判断一个常量是废弃常量">如何判断一个常量是废弃常量？
&lt;/h4>&lt;p>运行时常量池主要回收的是废弃的常量。那么，我们如何判断一个常量是废弃常量呢？&lt;/p>
&lt;p>假如在字符串常量池中存在字符串 &amp;ldquo;abc&amp;rdquo;，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 &amp;ldquo;abc&amp;rdquo; 就是废弃常量，如果这时发生内存回收的话而且有必要的话，&amp;ldquo;abc&amp;rdquo; 就会被系统清理出常量池了。&lt;/p>
&lt;h4 id="如何判断一个类是无用的类">如何判断一个类是无用的类
&lt;/h4>&lt;p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？&lt;/p>
&lt;p>判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面 3 个条件才能算是 &lt;strong>“无用的类”&lt;/strong> ：&lt;/p>
&lt;ul>
&lt;li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。&lt;/li>
&lt;li>加载该类的 &lt;code>ClassLoader&lt;/code> 已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，否则通常是很难达成的。&lt;/li>
&lt;li>该类对应的 &lt;code>java.lang.Class&lt;/code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。&lt;/li>
&lt;/ul>
&lt;p>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。关于是否要对类型进行回收， HotSpot 虚拟机提供了&lt;code>-Xnoclassgc&lt;/code> 参数进行控制&lt;/p>
&lt;h3 id="垃圾收集算法">垃圾收集算法
&lt;/h3>&lt;h4 id="分代收集理论">分代收集理论
&lt;/h4>&lt;p>当前商业虚拟机的垃圾收集器，大多数都遵循了“分代收集”（Generational Collection）的理论进行设计，分代收集名为理论，实质是一套符合大多数程序运行实 际情况的经验法则，它建立在两个分代假说之上：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这也就延伸出了多款垃圾收集器的统一原则：&lt;strong>收集器应该将 Java 堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过 程的次数）分配到不同的区域之中存储。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>显而易见，如果一个区域中大多数对象都是朝生夕灭，难以熬过垃圾收集过程的话，那么把它们集中放在一起，每次回收时只关注如 何保留少量存活而不是去标记那些大量将要被回收的对象，就能以较低代价回收到大量的空间；如果剩下的都是难以消亡的对象，那把它们集中放在一块，虚拟机便可以使用较低的频率来回收这个区域，这就同时兼顾了垃圾收集的时间开销和内存的空间有效利 用。&lt;/p>
&lt;/blockquote>
&lt;p>所以 Java 堆被划分为了几个不同的区域，垃圾收集器才可以每次些部分的区域，因此才有了下面针对于各分代区域的相关术语。&lt;/p>
&lt;p>部分收集 (Partial GC)：&lt;/p>
&lt;ul>
&lt;li>新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；&lt;/li>
&lt;li>老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；&lt;/li>
&lt;li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。&lt;/li>
&lt;/ul>
&lt;p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。&lt;/p>
&lt;p>继续衍化发展出了“标记-复制算法”“标记-清除算法”“标记-整理算法”等针对性的垃圾收集算法。&lt;/p>
&lt;h4 id="标记-清除算法">标记-清除算法
&lt;/h4>&lt;p>该算法分为“标记”和“清除”阶段：：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>对象分配时的效率问题&lt;/strong>&lt;/li>
&lt;li>&lt;strong>空间问题（标记清除后会产生大量不连续的碎片）&lt;/strong>&lt;/li>
&lt;/ol>
&lt;img src="标记-清除算法.jpeg" alt="标记-清除算法" style="zoom: 50%;" />
&lt;h4 id="标记-复制算法">标记-复制算法
&lt;/h4>&lt;p>为了解决效率问题，“标记-复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。&lt;/p>
&lt;img src="标记复制.png" alt="标记复制" style="zoom:50%;" />
&lt;p>&lt;strong>现在的商用 Java 虚拟机大多都优先采用了这种收集算法去回收新生代&lt;/strong>，新生代中的对象有 98%熬不过第一轮收集。因此并不需要按照 1∶1 的比例来划分新生代的内存空间。在此思想上提出了一种更优化的半区复制分代策略，现在称为“Appel 式回收”。&lt;/p>
&lt;p>Appel 式回收的具体做法是把 新生代分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次分配内存只使用 Eden 和其中一块 Survivor。发生垃圾搜集时，将 Eden 和 Survivor 中仍然存活的对象一 次性复制到另外一块 Survivor 空间上，然后直接清理掉 Eden 和已用过的那块 Survivor 空间。HotSpot 虚拟机默认 Eden 和 Survivor 的大小比例是 8∶1，也即每次新生代中可 用内存空间为整个新生代容量的 90%（Eden 的 80%加上一个 Survivor 的 10%），只有一 个 Survivor 空间，即 10%的新生代是会被“浪费”的。当然，任何人都没有办法百分百保证每次回收都只有不多于 10%的 对象存活，当 Survivor 空间不足以容纳一次 Minor GC 之后存活的对象时，这些对象将通过分配担保（Handle Promotion）机制直接进入老年代。&lt;/p>
&lt;h4 id="标记-整理算法">标记-整理算法
&lt;/h4>&lt;p>根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉边界以外的内存。&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/%e6%a0%87%e8%ae%b0-%e6%95%b4%e7%90%86.png"
loading="lazy"
alt="标记-整理"
>&lt;/p>
&lt;p>是否移动对象是一项优缺点并存的风险决策：&lt;/p>
&lt;ol>
&lt;li>如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动 操作必须全程暂停用户应用程序才能进行（“Stop The World”） 。&lt;/li>
&lt;li>如果完全不移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。&lt;/li>
&lt;/ol>
&lt;p>基于以上两点，是否移动对象都存在弊端，&lt;strong>移动则内存回收时会更复杂，不移动则内存分配时会更复杂。从垃圾收集的停顿时间来看，不移动对象停顿时间会更短，甚至可以不需要停顿，但是从整个程序的运行效率来看，移动对象会更划算&lt;/strong>。即使不移动对象会使得收集器的效率提升一些，减少垃圾收集时的用户线程停顿时间，但因内存分配和访问相比垃圾收集频率要高得多，这部分的耗时增加，总吞吐量仍然是下降的。&lt;/p>
&lt;h3 id="经典垃圾收集器">经典垃圾收集器
&lt;/h3>&lt;p>&lt;strong>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。&lt;/strong>&lt;/p>
&lt;p>虽然我们对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为直到现在为止还没有最好的垃圾收集器出现，更加没有万能的垃圾收集器，&lt;strong>我们能做的就是根据具体应用场景选择适合自己的垃圾收集器&lt;/strong>。试想一下：如果有一种四海之内、任何场景下都适用的完美收集器存在，那么我们的 HotSpot 虚拟机就不会实现那么多不同的垃圾收集器了。&lt;/p>
&lt;img src="垃圾收集器.png" alt="垃圾收集器" style="zoom:50%;" />
&lt;h4 id="serial收集器">Serial收集器
&lt;/h4>&lt;p>Serial（串行）收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 &lt;strong>“单线程”&lt;/strong> 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ &lt;strong>&amp;ldquo;Stop The World&amp;rdquo;&lt;/strong> ），直到它收集结束。&lt;/p>
&lt;p>&lt;strong>新生代采用标记-复制算法，老年代采用标记-整理算法。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/Serial:SerialOld.png"
width="947"
height="183"
srcset="https://cyber-blog.github.io/p/jvm-gc/Serial:SerialOld_hu12829115943650796854.png 480w, https://cyber-blog.github.io/p/jvm-gc/Serial:SerialOld_hu13473017132807510316.png 1024w"
loading="lazy"
alt="Serial:SerialOld"
class="gallery-image"
data-flex-grow="517"
data-flex-basis="1241px"
>&lt;/p>
&lt;p>虚拟机的设计者们当然知道 Stop The World 带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。&lt;/p>
&lt;p>但是 Serial 收集器有没有优于其他垃圾收集器的地方呢？当然有，它&lt;strong>简单而高效（与其他收集器的单线程相比）&lt;/strong>。Serial 收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率（桌面端、部分微服务场景）。Serial 收集器对于运行在 Client 模式下的虚拟机来说是个不错的选择。&lt;/p>
&lt;h5 id="serial-old-收集器">Serial Old 收集器
&lt;/h5>&lt;p>&lt;strong>Serial 收集器的老年代版本&lt;/strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。&lt;/p>
&lt;h4 id="parnew-收集器">ParNew 收集器
&lt;/h4>&lt;p>&lt;strong>ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为包括 Serial 收集器可用的所有控制参数（例如：&lt;code>-XX： SurvivorRatio&lt;/code>、&lt;code>-XX： PretenureSizeThreshold&lt;/code>、&lt;code>-XX：HandlePromotionFailure &lt;/code>等）、控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/ParNew.png"
width="1640"
height="430"
srcset="https://cyber-blog.github.io/p/jvm-gc/ParNew_hu15704673982829257725.png 480w, https://cyber-blog.github.io/p/jvm-gc/ParNew_hu12748736570910000945.png 1024w"
loading="lazy"
alt="ParNew"
class="gallery-image"
data-flex-grow="381"
data-flex-basis="915px"
>&lt;/p>
&lt;p>它是许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。ParNew 收集器在单核心处理器的环境中绝对不会有比 Serial 收集器更好的效果，当然，随着可以被使用的处理器核心数量的增加，ParNew 对于垃圾收集时系统资源的高效利用还是很有好处的。&lt;/p>
&lt;h4 id="parallel-scavenge-收集器">Parallel Scavenge 收集器
&lt;/h4>&lt;p>&lt;strong>Parallel Scavenge 收集器也是一款新生代收集器，同样基于标记复制算法，&lt;/strong>&lt;/p>
&lt;p>&lt;strong>其设计重点是吞吐量（高效率的利用 CPU）。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cyber-blog.github.io/p/jvm-gc/%E5%90%9E%E5%90%90%E9%87%8F.png"
width="1846"
height="298"
srcset="https://cyber-blog.github.io/p/jvm-gc/%E5%90%9E%E5%90%90%E9%87%8F_hu11581406262064717700.png 480w, https://cyber-blog.github.io/p/jvm-gc/%E5%90%9E%E5%90%90%E9%87%8F_hu2007942259521272936.png 1024w"
loading="lazy"
alt="吞吐量"
class="gallery-image"
data-flex-grow="619"
data-flex-basis="1486px"
>&lt;/p>
&lt;blockquote>
&lt;p>如果虚拟机完成某个任务，用户代码加 上垃圾收集总共耗费了 100 分钟，其中垃圾 收集花掉 1 分钟，那吞吐量就是 99%。&lt;/p>
&lt;/blockquote>
&lt;p>Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理优化交给虚拟机去完成也是一个不错的选择。&lt;/p>
&lt;p>&lt;strong>这是 JDK1.8 默认收集，默认使用 Parallel Scavenge + Parallel Old&lt;/strong>&lt;/p>
&lt;p>使用 &lt;code>java -XX:+PrintCommandLineFlags -version&lt;/code> 命令查看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">-XX:InitialHeapSize&lt;span class="o">=&lt;/span>&lt;span class="m">262921408&lt;/span> -XX:MaxHeapSize&lt;span class="o">=&lt;/span>&lt;span class="m">4206742528&lt;/span> -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">java version &lt;span class="s2">&amp;#34;1.8.0_211&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Java&lt;span class="o">(&lt;/span>TM&lt;span class="o">)&lt;/span> SE Runtime Environment &lt;span class="o">(&lt;/span>build 1.8.0_211-b12&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Java HotSpot&lt;span class="o">(&lt;/span>TM&lt;span class="o">)&lt;/span> 64-Bit Server VM &lt;span class="o">(&lt;/span>build 25.211-b12, mixed mode&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="parallel-old-收集器">Parallel Old 收集器
&lt;/h5>&lt;p>&lt;strong>Parallel Scavenge 收集器的老年代版本&lt;/strong>。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。&lt;/p>
&lt;h4 id="cms-收集器">CMS 收集器
&lt;/h4>&lt;p>&lt;strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。&lt;/strong>&lt;/p>
&lt;p>从名字中的&lt;strong>Mark Sweep&lt;/strong>这两个词可以看出，CMS 收集器是一种 &lt;strong>“标记-清除”算法&lt;/strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>初始标记：&lt;/strong> 暂停所有的其他线程，并记录下直接与 &lt;code>GCRoots&lt;/code> 相连的对象，速度很快 ；&lt;/li>
&lt;li>&lt;strong>并发标记：&lt;/strong> 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。&lt;/li>
&lt;li>&lt;strong>重新标记：&lt;/strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短。&lt;/li>
&lt;li>&lt;strong>并发清除：&lt;/strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。&lt;/li>
&lt;/ul>
&lt;img src="CMS.png" alt="CMS" style="zoom:50%;" />
&lt;p>它是一款优秀的垃圾收集器，主要优点：&lt;strong>并发收集、低停顿&lt;/strong>。但是它有下面三个明显的缺点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对 CPU 资源敏感；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>无法处理浮动垃圾；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="garbage-first-收集器">Garbage First 收集器
&lt;/h4>&lt;p>&lt;strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征。&lt;/strong>&lt;/p>
&lt;p>被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备以下特点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>并行与并发&lt;/strong>：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。&lt;/li>
&lt;li>&lt;strong>分代收集&lt;/strong>：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。&lt;/li>
&lt;li>&lt;strong>空间整合&lt;/strong>：与 CMS 的“标记-清理”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。&lt;/li>
&lt;li>&lt;strong>可预测的停顿&lt;/strong>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)&lt;/strong> 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。&lt;/p>
&lt;h3 id="新一代的垃圾收集器">新一代的垃圾收集器
&lt;/h3>&lt;h4 id="zgc-收集器">ZGC 收集器
&lt;/h4>&lt;p>&lt;a class="link" href="https://wiki.openjdk.java.net/display/zgc/Main" target="_blank" rel="noopener"
>ZGC&lt;/a>（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器。&lt;/p>
&lt;p>它的设计目标包括：&lt;/p>
&lt;ul>
&lt;li>停顿时间不超过10ms；&lt;/li>
&lt;li>停顿时间不会随着堆的大小，或者活跃对象的大小而增加；&lt;/li>
&lt;li>支持8MB~4TB级别的堆（未来支持16TB）。&lt;/li>
&lt;/ul>
&lt;p>在性能方面，尽管目前还处于实验状态，还没有完成所有特性，稳定性打磨和性能 调优也仍在进行，但即使是这种状态下的 ZGC，其性能表现已经相当亮眼，从官方给 出的测试结果来看，用“令人震惊的、革命性的 ZGC”来形容都不为过。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>与 Shenandoah 和 G1 一样，ZGC 也采用基于 Region 的堆内存布局。&lt;/li>
&lt;li>染色指针技术（Colored Pointer，其他 类似的技术中可能将它称为 Tag Pointer 或者 Version Pointer）。&lt;/li>
&lt;li>ZGC 完全没有使用记忆集，没事分代。&lt;/li>
&lt;/ol>
&lt;h3 id="如何选择垃圾收集器">如何选择垃圾收集器
&lt;/h3>&lt;p>一般来说，收集器的选择就从以上这几点出发来考虑。举个例子，假设某个直接面 向用户提供服务的 B/S 系统准备选择垃圾收集器，一般来说延迟时间 是这类应用的主要 关注点，那么：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果你有充足的预算但没有太多调优经验，那么一套带商业技术支持的专有硬件 或者软件解决方案是不错的选择，Azul 公司以前主推的 Vega 系统和现在主推的 Zing VM 是这方面的代表，这样你就可以使用传说中的 C4 收集器了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你虽然没有足够预算去使用商业解决方案，但能够掌控软硬件型号，使用较 新的版本，同时又特别注重延迟，那 ZGC 很值得尝试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你对还处于实验状态的收集器的稳定性有所顾虑，或者应用必须运行在 Windows 操作系统下，那 ZGC 就无缘了，试试 Shenandoah 吧。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你接手的是遗留系统，软硬件基础设施和 JDK 版本都比较落后，那就根据内 存规模衡量一下，对于大概 4GB 到 6GB 以下的堆内存，CMS 一般能处理得比较好，而对于更大的堆内存，可重点考察一下 G1。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="参考的一手资料出处">参考的一手资料出处
&lt;/h1>&lt;blockquote>
&lt;p>本教程基本上照搬了周志明老师的深入理解Java虚拟机，相当于本书的读后感或笔记&lt;/p>
&lt;p>&lt;a class="link" href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener"
>新一代垃圾回收器ZGC的探索与实践&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html#g1-%E6%94%B6%E9%9B%86%E5%99%A8" target="_blank" rel="noopener"
>JavaGuide&lt;/a>&lt;/p>
&lt;p>《Java虚拟机规范》&lt;/p>
&lt;p>要学习虚拟机，《Java虚拟机规范》无论如何都是必须读的。这本书的概念和细节描述与 Sun 的早期虚拟机（Sun Classic 虚拟机）高度吻合，随着技术的发展，高性能虚拟机真正的细节实现方式已经渐渐与虚拟机规范所描述的方 式差距越来越大，如果只能选择一本参考书来了解 Java 虚拟机，那必然是这本书。&lt;/p>
&lt;p>《Java 语言规范》&lt;/p>
&lt;p>虽然 Java 虚拟机并不是 Java 语言专有的，但是了解 Java 语言的各种细节规定对虚拟机的行为也是很有帮助的， 它与《Java虚拟机规范》一样都是 Oracle 官方直接出版的书籍，而且这本书还是由 Java 之父 James Gosling 亲自执笔撰写。&lt;/p>
&lt;p>2.网站资源&lt;/p>
&lt;p>高级语言虚拟机圈子：http://hllvm.group.iteye.com/。&lt;/p>
&lt;p>里面有一些关于虚拟机的讨论，并不只限于 Java 虚拟机，包括了所有针对高级语言虚拟机（High-Level Language Virtual Machine）的讨论，不过该网站针对 Java 虚拟机的讨论还是绝对的主流。圈主 RednaxelaFX（莫枢）的博客（http://rednaxelafx.iteye.com/）是另外一个非常有价值的虚拟机及编译原理等资料的分 享园地。&lt;/p>
&lt;p>HotSpot Internals：https://wiki.openjdk.java.net/display/HotSpot/Main。&lt;/p>
&lt;p>这是一个关于 OpenJDK 的 Wiki 网站，许多文章都由 JDK 的开发团队编写，更新很慢，但是有很大的参考价值。&lt;/p>
&lt;p>The HotSpot Group：http://openjdk.java.net/groups/hotspot/。&lt;/p>
&lt;p>HotSpot 组群，里面有关于虚拟机开发、编译器、垃圾收集和运行时四个邮件组，包含了关于 HotSpot 虚拟机最新的讨论。&lt;/p>
&lt;/blockquote></description></item></channel></rss>